package com.ketheroth.vanillaextension.init;

import com.ketheroth.vanillaextension.fences.CoarseDirtFence;
import com.ketheroth.vanillaextension.fences.ConcretePowderFence;
import com.ketheroth.vanillaextension.fences.DirtPathFence;
import com.ketheroth.vanillaextension.fences.FallingFence;
import com.ketheroth.vanillaextension.fences.FlattenableFence;
import com.ketheroth.vanillaextension.fences.GrassBlockFence;
import com.ketheroth.vanillaextension.fences.LogFence;
import com.ketheroth.vanillaextension.fences.MyceliumFence;
import com.ketheroth.vanillaextension.fences.OreFence;
import com.ketheroth.vanillaextension.fences.PumpkinFence;
import com.ketheroth.vanillaextension.fences.RedstoneLampFence;
import com.ketheroth.vanillaextension.fences.RedstoneOreFence;
import com.ketheroth.vanillaextension.slabs.CoarseDirtSlab;
import com.ketheroth.vanillaextension.slabs.ConcretePowderSlab;
import com.ketheroth.vanillaextension.slabs.DirtPathSlab;
import com.ketheroth.vanillaextension.slabs.DirtSlab;
import com.ketheroth.vanillaextension.slabs.FallingSlab;
import com.ketheroth.vanillaextension.slabs.FarmSlab;
import com.ketheroth.vanillaextension.slabs.FlattenableSlab;
import com.ketheroth.vanillaextension.slabs.GrassBlockSlab;
import com.ketheroth.vanillaextension.slabs.LogSlab;
import com.ketheroth.vanillaextension.slabs.MyceliumSlab;
import com.ketheroth.vanillaextension.slabs.OreSlab;
import com.ketheroth.vanillaextension.slabs.PumpkinSlab;
import com.ketheroth.vanillaextension.slabs.RedstoneLampSlab;
import com.ketheroth.vanillaextension.slabs.RedstoneOreSlab;
import com.ketheroth.vanillaextension.stairs.CoarseDirtStairs;
import com.ketheroth.vanillaextension.stairs.ConcretePowderStairs;
import com.ketheroth.vanillaextension.stairs.DirtPathStairs;
import com.ketheroth.vanillaextension.stairs.DirtStairs;
import com.ketheroth.vanillaextension.stairs.FallingStairs;
import com.ketheroth.vanillaextension.stairs.FarmStairs;
import com.ketheroth.vanillaextension.stairs.FlattenableStairs;
import com.ketheroth.vanillaextension.stairs.GrassBlockStairs;
import com.ketheroth.vanillaextension.stairs.LogStairs;
import com.ketheroth.vanillaextension.stairs.MyceliumStairs;
import com.ketheroth.vanillaextension.stairs.OreStairs;
import com.ketheroth.vanillaextension.stairs.PumpkinStairs;
import com.ketheroth.vanillaextension.stairs.RedstoneLampStairs;
import com.ketheroth.vanillaextension.stairs.RedstoneOreStairs;
import com.ketheroth.vanillaextension.trapdoors.CoarseDirtTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.ConcretePowderTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.DirtPathTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.FallingTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.FlattenableTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.GrassBlockTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.LogTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.MyceliumTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.OreTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.PumpkinTrapdoor;
import com.ketheroth.vanillaextension.trapdoors.RedstoneLampTrapdoor;
import com.ketheroth.vanillaextension.walls.CoarseDirtWall;
import com.ketheroth.vanillaextension.walls.ConcretePowderWall;
import com.ketheroth.vanillaextension.walls.DirtPathWall;
import com.ketheroth.vanillaextension.walls.FallingWall;
import com.ketheroth.vanillaextension.walls.FlattenableWall;
import com.ketheroth.vanillaextension.walls.GrassBlockWall;
import com.ketheroth.vanillaextension.walls.LogWall;
import com.ketheroth.vanillaextension.walls.MyceliumWall;
import com.ketheroth.vanillaextension.walls.OreWall;
import com.ketheroth.vanillaextension.walls.PumpkinWall;
import com.ketheroth.vanillaextension.walls.RedstoneLampWall;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.FenceBlock;
import net.minecraft.world.level.block.GlowLichenBlock;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.StairBlock;
import net.minecraft.world.level.block.TrapDoorBlock;
import net.minecraft.world.level.block.WallBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

import static com.ketheroth.vanillaextension.VanillaExtension.MODID;

public class VEBlocks {
	public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);

	public static final RegistryObject<Block> stone_fence = BLOCKS.register("stone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.STONE)));
	public static final RegistryObject<Block> granite_fence = BLOCKS.register("granite_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GRANITE)));
	public static final RegistryObject<Block> polished_granite_fence = BLOCKS.register("polished_granite_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_GRANITE)));
	public static final RegistryObject<Block> diorite_fence = BLOCKS.register("diorite_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DIORITE)));
	public static final RegistryObject<Block> polished_diorite_fence = BLOCKS.register("polished_diorite_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_DIORITE)));
	public static final RegistryObject<Block> andesite_fence = BLOCKS.register("andesite_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ANDESITE)));
	public static final RegistryObject<Block> polished_andesite_fence = BLOCKS.register("polished_andesite_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_ANDESITE)));
	public static final RegistryObject<Block> grass_block_fence = BLOCKS.register("grass_block_fence", () -> new GrassBlockFence(BlockBehaviour.Properties.copy(Blocks.GRASS_BLOCK)));
	public static final RegistryObject<Block> dirt_fence = BLOCKS.register("dirt_fence", () -> new FlattenableFence(BlockBehaviour.Properties.copy(Blocks.DIRT)));
	public static final RegistryObject<Block> coarse_dirt_fence = BLOCKS.register("coarse_dirt_fence", () -> new CoarseDirtFence(BlockBehaviour.Properties.copy(Blocks.COARSE_DIRT)));
	public static final RegistryObject<Block> podzol_fence = BLOCKS.register("podzol_fence", () -> new FlattenableFence(BlockBehaviour.Properties.copy(Blocks.PODZOL)));
	public static final RegistryObject<Block> cobblestone_fence = BLOCKS.register("cobblestone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.COBBLESTONE)));
	public static final RegistryObject<Block> bedrock_fence = BLOCKS.register("bedrock_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BEDROCK)));
	public static final RegistryObject<Block> sand_fence = BLOCKS.register("sand_fence", () -> new FallingFence(BlockBehaviour.Properties.copy(Blocks.SAND)));
	public static final RegistryObject<Block> red_sand_fence = BLOCKS.register("red_sand_fence", () -> new FallingFence(BlockBehaviour.Properties.copy(Blocks.RED_SAND)));
	public static final RegistryObject<Block> gravel_fence = BLOCKS.register("gravel_fence", () -> new FallingFence(BlockBehaviour.Properties.copy(Blocks.GRAVEL)));
	public static final RegistryObject<Block> gold_ore_fence = BLOCKS.register("gold_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.GOLD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_GOLD_ORE_FENCE = BLOCKS.register("deepslate_gold_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_GOLD_ORE)));
	public static final RegistryObject<Block> iron_ore_fence = BLOCKS.register("iron_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.IRON_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_IRON_ORE_FENCE = BLOCKS.register("deepslate_iron_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_IRON_ORE)));
	public static final RegistryObject<Block> coal_ore_fence = BLOCKS.register("coal_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.COAL_ORE), UniformInt.of(0, 2)));
	public static final RegistryObject<Block> DEEPSLATE_COAL_ORE_FENCE = BLOCKS.register("deepslate_coal_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COAL_ORE), UniformInt.of(0, 2)));
	public static final RegistryObject<Block> nether_gold_ore_fence = BLOCKS.register("nether_gold_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.NETHER_GOLD_ORE), UniformInt.of(0, 1)));
	public static final RegistryObject<Block> oak_log_fence = BLOCKS.register("oak_log_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_log_fence = BLOCKS.register("spruce_log_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_log_fence = BLOCKS.register("birch_log_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_log_fence = BLOCKS.register("jungle_log_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_log_fence = BLOCKS.register("acacia_log_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_log_fence = BLOCKS.register("dark_oak_log_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_log_fence = BLOCKS.register("stripped_oak_log_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_log_fence = BLOCKS.register("stripped_spruce_log_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_log_fence = BLOCKS.register("stripped_birch_log_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_log_fence = BLOCKS.register("stripped_jungle_log_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_log_fence = BLOCKS.register("stripped_acacia_log_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_log_fence = BLOCKS.register("stripped_dark_oak_log_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_wood_fence = BLOCKS.register("oak_wood_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_wood_fence = BLOCKS.register("spruce_wood_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_wood_fence = BLOCKS.register("birch_wood_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_wood_fence = BLOCKS.register("jungle_wood_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_wood_fence = BLOCKS.register("acacia_wood_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_wood_fence = BLOCKS.register("dark_oak_wood_fence", () -> new LogFence(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_wood_fence = BLOCKS.register("stripped_oak_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_wood_fence = BLOCKS.register("stripped_spruce_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_wood_fence = BLOCKS.register("stripped_birch_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_wood_fence = BLOCKS.register("stripped_jungle_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_wood_fence = BLOCKS.register("stripped_acacia_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_wood_fence = BLOCKS.register("stripped_dark_oak_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_leaves_fence = BLOCKS.register("oak_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> spruce_leaves_fence = BLOCKS.register("spruce_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> birch_leaves_fence = BLOCKS.register("birch_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> jungle_leaves_fence = BLOCKS.register("jungle_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> acacia_leaves_fence = BLOCKS.register("acacia_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> dark_oak_leaves_fence = BLOCKS.register("dark_oak_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> AZALEA_LEAVES_FENCE = BLOCKS.register("azalea_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.AZALEA_LEAVES).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> FLOWERING_AZALEA_LEAVES_FENCE = BLOCKS.register("flowering_azalea_leaves_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.AZALEA_LEAVES).noOcclusion().isValidSpawn((state, getter, pos, entityType) -> entityType == EntityType.OCELOT || entityType == EntityType.PARROT).isSuffocating((state, getter, pos) -> false).isViewBlocking((state, getter, pos) -> false)));
	public static final RegistryObject<Block> sponge_fence = BLOCKS.register("sponge_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SPONGE)));
	public static final RegistryObject<Block> wet_sponge_fence = BLOCKS.register("wet_sponge_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WET_SPONGE)));
	public static final RegistryObject<Block> glass_fence = BLOCKS.register("glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GLASS)));
	public static final RegistryObject<Block> lapis_ore_fence = BLOCKS.register("lapis_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.LAPIS_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> DEEPSLATE_LAPIS_ORE_FENCE = BLOCKS.register("deepslate_lapis_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_LAPIS_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> lapis_block_fence = BLOCKS.register("lapis_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LAPIS_BLOCK)));
	public static final RegistryObject<Block> sandstone_fence = BLOCKS.register("sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SANDSTONE)));
	public static final RegistryObject<Block> chiseled_sandstone_fence = BLOCKS.register("chiseled_sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_SANDSTONE)));
	public static final RegistryObject<Block> cut_sandstone_fence = BLOCKS.register("cut_sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CUT_SANDSTONE)));
	public static final RegistryObject<Block> white_wool_fence = BLOCKS.register("white_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_WOOL)));
	public static final RegistryObject<Block> orange_wool_fence = BLOCKS.register("orange_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_WOOL)));
	public static final RegistryObject<Block> magenta_wool_fence = BLOCKS.register("magenta_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_WOOL)));
	public static final RegistryObject<Block> light_blue_wool_fence = BLOCKS.register("light_blue_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_WOOL)));
	public static final RegistryObject<Block> yellow_wool_fence = BLOCKS.register("yellow_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_WOOL)));
	public static final RegistryObject<Block> lime_wool_fence = BLOCKS.register("lime_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIME_WOOL)));
	public static final RegistryObject<Block> pink_wool_fence = BLOCKS.register("pink_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PINK_WOOL)));
	public static final RegistryObject<Block> gray_wool_fence = BLOCKS.register("gray_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_WOOL)));
	public static final RegistryObject<Block> light_gray_wool_fence = BLOCKS.register("light_gray_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL)));
	public static final RegistryObject<Block> cyan_wool_fence = BLOCKS.register("cyan_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_WOOL)));
	public static final RegistryObject<Block> purple_wool_fence = BLOCKS.register("purple_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_WOOL)));
	public static final RegistryObject<Block> blue_wool_fence = BLOCKS.register("blue_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_WOOL)));
	public static final RegistryObject<Block> brown_wool_fence = BLOCKS.register("brown_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_WOOL)));
	public static final RegistryObject<Block> green_wool_fence = BLOCKS.register("green_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_WOOL)));
	public static final RegistryObject<Block> red_wool_fence = BLOCKS.register("red_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_WOOL)));
	public static final RegistryObject<Block> black_wool_fence = BLOCKS.register("black_wool_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_WOOL)));
	public static final RegistryObject<Block> gold_block_fence = BLOCKS.register("gold_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GOLD_BLOCK)));
	public static final RegistryObject<Block> iron_block_fence = BLOCKS.register("iron_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK)));
	public static final RegistryObject<Block> brick_fence = BLOCKS.register("brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BRICKS)));
	public static final RegistryObject<Block> tnt_fence = BLOCKS.register("tnt_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.TNT)));
	public static final RegistryObject<Block> bookshelf_fence = BLOCKS.register("bookshelf_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BOOKSHELF)));
	public static final RegistryObject<Block> mossy_cobblestone_fence = BLOCKS.register("mossy_cobblestone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MOSSY_COBBLESTONE)));
	public static final RegistryObject<Block> obsidian_fence = BLOCKS.register("obsidian_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
	public static final RegistryObject<Block> spawner_fence = BLOCKS.register("spawner_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SPAWNER)));
	public static final RegistryObject<Block> diamond_ore_fence = BLOCKS.register("diamond_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.DIAMOND_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> DEEPSLATE_DIAMOND_ORE_FENCE = BLOCKS.register("deepslate_diamond_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_DIAMOND_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> diamond_block_fence = BLOCKS.register("diamond_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DIAMOND_BLOCK)));
	public static final RegistryObject<Block> redstone_ore_fence = BLOCKS.register("redstone_ore_fence", () -> new RedstoneOreFence(BlockBehaviour.Properties.copy(Blocks.REDSTONE_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_REDSTONE_ORE_FENCE = BLOCKS.register("deepslate_redstone_ore_fence", () -> new RedstoneOreFence(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().lightLevel(/*litBlockEmission(9)*/ state -> 9).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
	public static final RegistryObject<Block> ice_fence = BLOCKS.register("ice_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.ICE).friction(0.98F).strength(0.5F).sound(SoundType.GLASS).noOcclusion()));
	public static final RegistryObject<Block> snow_block_fence = BLOCKS.register("snow_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
	public static final RegistryObject<Block> clay_fence = BLOCKS.register("clay_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CLAY)));
	public static final RegistryObject<Block> pumpkin_fence = BLOCKS.register("pumpkin_fence", () -> new PumpkinFence(BlockBehaviour.Properties.copy(Blocks.PUMPKIN)));
	public static final RegistryObject<Block> netherrack_fence = BLOCKS.register("netherrack_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
	public static final RegistryObject<Block> soul_sand_fence = BLOCKS.register("soul_sand_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_BROWN).strength(0.5F).speedFactor(0.4F).sound(SoundType.SAND)));
	public static final RegistryObject<Block> soul_soil_fence = BLOCKS.register("soul_soil_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_SOIL)));
	public static final RegistryObject<Block> glowstone_fence = BLOCKS.register("glowstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GLOWSTONE)));
	public static final RegistryObject<Block> carved_pumpkin_fence = BLOCKS.register("carved_pumpkin_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CARVED_PUMPKIN)));
	public static final RegistryObject<Block> jack_o_lantern_fence = BLOCKS.register("jack_o_lantern_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.JACK_O_LANTERN)));
	public static final RegistryObject<Block> white_stained_glass_fence = BLOCKS.register("white_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_STAINED_GLASS)));
	public static final RegistryObject<Block> orange_stained_glass_fence = BLOCKS.register("orange_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_STAINED_GLASS)));
	public static final RegistryObject<Block> magenta_stained_glass_fence = BLOCKS.register("magenta_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_STAINED_GLASS)));
	public static final RegistryObject<Block> light_blue_stained_glass_fence = BLOCKS.register("light_blue_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> yellow_stained_glass_fence = BLOCKS.register("yellow_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_STAINED_GLASS)));
	public static final RegistryObject<Block> lime_stained_glass_fence = BLOCKS.register("lime_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIME_STAINED_GLASS)));
	public static final RegistryObject<Block> pink_stained_glass_fence = BLOCKS.register("pink_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PINK_STAINED_GLASS)));
	public static final RegistryObject<Block> gray_stained_glass_fence = BLOCKS.register("gray_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> light_gray_stained_glass_fence = BLOCKS.register("light_gray_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> cyan_stained_glass_fence = BLOCKS.register("cyan_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_STAINED_GLASS)));
	public static final RegistryObject<Block> purple_stained_glass_fence = BLOCKS.register("purple_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_STAINED_GLASS)));
	public static final RegistryObject<Block> blue_stained_glass_fence = BLOCKS.register("blue_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> brown_stained_glass_fence = BLOCKS.register("brown_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_STAINED_GLASS)));
	public static final RegistryObject<Block> green_stained_glass_fence = BLOCKS.register("green_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_STAINED_GLASS)));
	public static final RegistryObject<Block> red_stained_glass_fence = BLOCKS.register("red_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_STAINED_GLASS)));
	public static final RegistryObject<Block> black_stained_glass_fence = BLOCKS.register("black_stained_glass_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_STAINED_GLASS)));
	public static final RegistryObject<Block> oak_trapdoor_fence = BLOCKS.register("oak_trapdoor_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OAK_TRAPDOOR)));
	public static final RegistryObject<Block> spruce_trapdoor_fence = BLOCKS.register("spruce_trapdoor_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_TRAPDOOR)));
	public static final RegistryObject<Block> birch_trapdoor_fence = BLOCKS.register("birch_trapdoor_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_TRAPDOOR)));
	public static final RegistryObject<Block> jungle_trapdoor_fence = BLOCKS.register("jungle_trapdoor_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_TRAPDOOR)));
	public static final RegistryObject<Block> acacia_trapdoor_fence = BLOCKS.register("acacia_trapdoor_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_TRAPDOOR)));
	public static final RegistryObject<Block> dark_oak_trapdoor_fence = BLOCKS.register("dark_oak_trapdoor_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_TRAPDOOR)));
	public static final RegistryObject<Block> stone_brick_fence = BLOCKS.register("stone_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.STONE_BRICKS)));
	public static final RegistryObject<Block> mossy_stone_brick_fence = BLOCKS.register("mossy_stone_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MOSSY_STONE_BRICKS)));
	public static final RegistryObject<Block> cracked_stone_brick_fence = BLOCKS.register("cracked_stone_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_STONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_stone_brick_fence = BLOCKS.register("chiseled_stone_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_STONE_BRICKS)));
	public static final RegistryObject<Block> brown_mushroom_block_fence = BLOCKS.register("brown_mushroom_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> red_mushroom_block_fence = BLOCKS.register("red_mushroom_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> mushroom_stem_fence = BLOCKS.register("mushroom_stem_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MUSHROOM_STEM)));
	public static final RegistryObject<Block> iron_bars_fence = BLOCKS.register("iron_bars_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BARS)));
	public static final RegistryObject<Block> melon_fence = BLOCKS.register("melon_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MELON)));
	public static final RegistryObject<Block> vine_fence = BLOCKS.register("vine_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().strength(0.2F).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> GLOW_LICHEN_FENCE = BLOCKS.register("glow_lichen_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT, MaterialColor.GLOW_LICHEN).noCollission().strength(0.2F).sound(SoundType.GLOW_LICHEN).lightLevel(GlowLichenBlock.emission(7))));
	public static final RegistryObject<Block> mycelium_fence = BLOCKS.register("mycelium_fence", () -> new MyceliumFence(BlockBehaviour.Properties.copy(Blocks.MYCELIUM)));
	public static final RegistryObject<Block> end_stone_fence = BLOCKS.register("end_stone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.END_STONE)));
	public static final RegistryObject<Block> dragon_egg_fence = BLOCKS.register("dragon_egg_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DRAGON_EGG)));
	public static final RegistryObject<Block> redstone_lamp_fence = BLOCKS.register("redstone_lamp_fence", () -> new RedstoneLampFence(BlockBehaviour.Properties.copy(Blocks.REDSTONE_LAMP)));
	public static final RegistryObject<Block> emerald_ore_fence = BLOCKS.register("emerald_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.EMERALD_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> DEEPSLATE_EMERALD_ORE_FENCE = BLOCKS.register("deepslate_emerald_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_EMERALD_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> emerald_block_fence = BLOCKS.register("emerald_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.EMERALD_BLOCK)));
	public static final RegistryObject<Block> redstone_block_fence = BLOCKS.register("redstone_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.REDSTONE_BLOCK)));
	public static final RegistryObject<Block> nether_quartz_ore_fence = BLOCKS.register("nether_quartz_ore_fence", () -> new OreFence(BlockBehaviour.Properties.copy(Blocks.NETHER_QUARTZ_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> hopper_fence = BLOCKS.register("hopper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.HOPPER)));
	public static final RegistryObject<Block> quartz_block_fence = BLOCKS.register("quartz_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_BLOCK)));
	public static final RegistryObject<Block> chiseled_quartz_block_fence = BLOCKS.register("chiseled_quartz_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_QUARTZ_BLOCK)));
	public static final RegistryObject<Block> quartz_pillar_fence = BLOCKS.register("quartz_pillar_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_PILLAR)));
	public static final RegistryObject<Block> white_terracotta_fence = BLOCKS.register("white_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
	public static final RegistryObject<Block> orange_terracotta_fence = BLOCKS.register("orange_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_terracotta_fence = BLOCKS.register("magenta_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_terracotta_fence = BLOCKS.register("light_blue_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_terracotta_fence = BLOCKS.register("yellow_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
	public static final RegistryObject<Block> lime_terracotta_fence = BLOCKS.register("lime_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
	public static final RegistryObject<Block> pink_terracotta_fence = BLOCKS.register("pink_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
	public static final RegistryObject<Block> gray_terracotta_fence = BLOCKS.register("gray_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_terracotta_fence = BLOCKS.register("light_gray_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_terracotta_fence = BLOCKS.register("cyan_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
	public static final RegistryObject<Block> purple_terracotta_fence = BLOCKS.register("purple_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
	public static final RegistryObject<Block> blue_terracotta_fence = BLOCKS.register("blue_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> brown_terracotta_fence = BLOCKS.register("brown_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
	public static final RegistryObject<Block> green_terracotta_fence = BLOCKS.register("green_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
	public static final RegistryObject<Block> red_terracotta_fence = BLOCKS.register("red_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
	public static final RegistryObject<Block> black_terracotta_fence = BLOCKS.register("black_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
	public static final RegistryObject<Block> slime_block_fence = BLOCKS.register("slime_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SLIME_BLOCK)));
	public static final RegistryObject<Block> iron_trapdoor_fence = BLOCKS.register("iron_trapdoor_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.IRON_TRAPDOOR)));
	public static final RegistryObject<Block> prismarine_fence = BLOCKS.register("prismarine_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
	public static final RegistryObject<Block> prismarine_brick_fence = BLOCKS.register("prismarine_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PRISMARINE_BRICKS)));
	public static final RegistryObject<Block> dark_prismarine_fence = BLOCKS.register("dark_prismarine_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
	public static final RegistryObject<Block> sea_lantern_fence = BLOCKS.register("sea_lantern_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SEA_LANTERN)));
	public static final RegistryObject<Block> hay_block_fence = BLOCKS.register("hay_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.HAY_BLOCK)));
	public static final RegistryObject<Block> terracotta_fence = BLOCKS.register("terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
	public static final RegistryObject<Block> coal_block_fence = BLOCKS.register("coal_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.COAL_BLOCK)));
	public static final RegistryObject<Block> packed_ice_fence = BLOCKS.register("packed_ice_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)));
	public static final RegistryObject<Block> red_sandstone_fence = BLOCKS.register("red_sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_SANDSTONE)));
	public static final RegistryObject<Block> chiseled_red_sandstone_fence = BLOCKS.register("chiseled_red_sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_RED_SANDSTONE)));
	public static final RegistryObject<Block> cut_red_sandstone_fence = BLOCKS.register("cut_red_sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CUT_RED_SANDSTONE)));
	public static final RegistryObject<Block> smooth_stone_fence = BLOCKS.register("smooth_stone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_STONE)));
	public static final RegistryObject<Block> smooth_sandstone_fence = BLOCKS.register("smooth_sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_SANDSTONE)));
	public static final RegistryObject<Block> smooth_quartz_fence = BLOCKS.register("smooth_quartz_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_QUARTZ)));
	public static final RegistryObject<Block> smooth_red_sandstone_fence = BLOCKS.register("smooth_red_sandstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_RED_SANDSTONE)));
	public static final RegistryObject<Block> purpur_block_fence = BLOCKS.register("purpur_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PURPUR_BLOCK)));
	public static final RegistryObject<Block> purpur_pillar_fence = BLOCKS.register("purpur_pillar_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PURPUR_PILLAR)));
	public static final RegistryObject<Block> end_stone_brick_fence = BLOCKS.register("end_stone_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.END_STONE_BRICKS)));
	public static final RegistryObject<Block> dirt_path_fence = BLOCKS.register("dirt_path_fence", () -> new DirtPathFence(BlockBehaviour.Properties.copy(Blocks.DIRT_PATH)));
	public static final RegistryObject<Block> magma_block_fence = BLOCKS.register("magma_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).lightLevel((state) -> 3).strength(0.5F)));
	public static final RegistryObject<Block> nether_wart_block_fence = BLOCKS.register("nether_wart_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_WART_BLOCK)));
	public static final RegistryObject<Block> red_nether_brick_fence = BLOCKS.register("red_nether_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
	public static final RegistryObject<Block> bone_block_fence = BLOCKS.register("bone_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BONE_BLOCK)));
	public static final RegistryObject<Block> white_glazed_terracotta_fence = BLOCKS.register("white_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> orange_glazed_terracotta_fence = BLOCKS.register("orange_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_glazed_terracotta_fence = BLOCKS.register("magenta_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_glazed_terracotta_fence = BLOCKS.register("light_blue_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_glazed_terracotta_fence = BLOCKS.register("yellow_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> lime_glazed_terracotta_fence = BLOCKS.register("lime_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIME_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> pink_glazed_terracotta_fence = BLOCKS.register("pink_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PINK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> gray_glazed_terracotta_fence = BLOCKS.register("gray_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_glazed_terracotta_fence = BLOCKS.register("light_gray_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_glazed_terracotta_fence = BLOCKS.register("cyan_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> purple_glazed_terracotta_fence = BLOCKS.register("purple_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> blue_glazed_terracotta_fence = BLOCKS.register("blue_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> brown_glazed_terracotta_fence = BLOCKS.register("brown_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> green_glazed_terracotta_fence = BLOCKS.register("green_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> red_glazed_terracotta_fence = BLOCKS.register("red_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> black_glazed_terracotta_fence = BLOCKS.register("black_glazed_terracotta_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> white_concrete_fence = BLOCKS.register("white_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE)));
	public static final RegistryObject<Block> orange_concrete_fence = BLOCKS.register("orange_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE)));
	public static final RegistryObject<Block> magenta_concrete_fence = BLOCKS.register("magenta_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE)));
	public static final RegistryObject<Block> light_blue_concrete_fence = BLOCKS.register("light_blue_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE)));
	public static final RegistryObject<Block> yellow_concrete_fence = BLOCKS.register("yellow_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE)));
	public static final RegistryObject<Block> lime_concrete_fence = BLOCKS.register("lime_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE)));
	public static final RegistryObject<Block> pink_concrete_fence = BLOCKS.register("pink_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE)));
	public static final RegistryObject<Block> gray_concrete_fence = BLOCKS.register("gray_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE)));
	public static final RegistryObject<Block> light_gray_concrete_fence = BLOCKS.register("light_gray_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE)));
	public static final RegistryObject<Block> cyan_concrete_fence = BLOCKS.register("cyan_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE)));
	public static final RegistryObject<Block> purple_concrete_fence = BLOCKS.register("purple_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE)));
	public static final RegistryObject<Block> blue_concrete_fence = BLOCKS.register("blue_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE)));
	public static final RegistryObject<Block> brown_concrete_fence = BLOCKS.register("brown_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE)));
	public static final RegistryObject<Block> green_concrete_fence = BLOCKS.register("green_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE)));
	public static final RegistryObject<Block> red_concrete_fence = BLOCKS.register("red_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE)));
	public static final RegistryObject<Block> black_concrete_fence = BLOCKS.register("black_concrete_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE)));
	public static final RegistryObject<Block> white_concrete_powder_fence = BLOCKS.register("white_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> orange_concrete_powder_fence = BLOCKS.register("orange_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> magenta_concrete_powder_fence = BLOCKS.register("magenta_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_blue_concrete_powder_fence = BLOCKS.register("light_blue_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> yellow_concrete_powder_fence = BLOCKS.register("yellow_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE_POWDER)));
	public static final RegistryObject<Block> lime_concrete_powder_fence = BLOCKS.register("lime_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE_POWDER)));
	public static final RegistryObject<Block> pink_concrete_powder_fence = BLOCKS.register("pink_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> gray_concrete_powder_fence = BLOCKS.register("gray_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_gray_concrete_powder_fence = BLOCKS.register("light_gray_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> cyan_concrete_powder_fence = BLOCKS.register("cyan_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> purple_concrete_powder_fence = BLOCKS.register("purple_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> blue_concrete_powder_fence = BLOCKS.register("blue_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> brown_concrete_powder_fence = BLOCKS.register("brown_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> green_concrete_powder_fence = BLOCKS.register("green_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> red_concrete_powder_fence = BLOCKS.register("red_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE_POWDER)));
	public static final RegistryObject<Block> black_concrete_powder_fence = BLOCKS.register("black_concrete_powder_fence", () -> new ConcretePowderFence(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> dried_kelp_block_fence = BLOCKS.register("dried_kelp_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DRIED_KELP_BLOCK)));
	public static final RegistryObject<Block> dead_tube_coral_block_fence = BLOCKS.register("dead_tube_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_brain_coral_block_fence = BLOCKS.register("dead_brain_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_bubble_coral_block_fence = BLOCKS.register("dead_bubble_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_fire_coral_block_fence = BLOCKS.register("dead_fire_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_horn_coral_block_fence = BLOCKS.register("dead_horn_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> tube_coral_block_fence = BLOCKS.register("tube_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> brain_coral_block_fence = BLOCKS.register("brain_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> bubble_coral_block_fence = BLOCKS.register("bubble_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> fire_coral_block_fence = BLOCKS.register("fire_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> horn_coral_block_fence = BLOCKS.register("horn_coral_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> blue_ice_fence = BLOCKS.register("blue_ice_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_ICE)));
	public static final RegistryObject<Block> honey_block_fence = BLOCKS.register("honey_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.HONEY_BLOCK)));
	public static final RegistryObject<Block> honeycomb_block_fence = BLOCKS.register("honeycomb_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.HONEYCOMB_BLOCK)));
	public static final RegistryObject<Block> warped_stem_fence = BLOCKS.register("warped_stem_fence", () -> new LogFence(BlockBehaviour.Properties.copy(Blocks.WARPED_STEM)));
	public static final RegistryObject<Block> stripped_warped_stem_fence = BLOCKS.register("stripped_warped_stem_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_STEM)));
	public static final RegistryObject<Block> warped_hyphae_fence = BLOCKS.register("warped_hyphae_fence", () -> new LogFence(BlockBehaviour.Properties.copy(Blocks.WARPED_HYPHAE)));
	public static final RegistryObject<Block> stripped_warped_hyphae_fence = BLOCKS.register("stripped_warped_hyphae_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_HYPHAE)));
	public static final RegistryObject<Block> warped_nylium_fence = BLOCKS.register("warped_nylium_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_NYLIUM)));
	public static final RegistryObject<Block> warped_wart_block_fence = BLOCKS.register("warped_wart_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_WART_BLOCK)));
	public static final RegistryObject<Block> crimson_stem_fence = BLOCKS.register("crimson_stem_fence", () -> new LogFence(BlockBehaviour.Properties.copy(Blocks.CRIMSON_STEM)));
	public static final RegistryObject<Block> stripped_crimson_stem_fence = BLOCKS.register("stripped_crimson_stem_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_STEM)));
	public static final RegistryObject<Block> crimson_hyphae_fence = BLOCKS.register("crimson_hyphae_fence", () -> new LogFence(BlockBehaviour.Properties.copy(Blocks.CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> stripped_crimson_hyphae_fence = BLOCKS.register("stripped_crimson_hyphae_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> crimson_nylium_fence = BLOCKS.register("crimson_nylium_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_NYLIUM)));
	public static final RegistryObject<Block> shroomlight_fence = BLOCKS.register("shroomlight_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SHROOMLIGHT)));
	public static final RegistryObject<Block> netherite_block_fence = BLOCKS.register("netherite_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.NETHERITE_BLOCK)));
	public static final RegistryObject<Block> ancient_debris_fence = BLOCKS.register("ancient_debris_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ANCIENT_DEBRIS)));
	public static final RegistryObject<Block> crying_obsidian_fence = BLOCKS.register("crying_obsidian_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRYING_OBSIDIAN)));
	public static final RegistryObject<Block> basalt_fence = BLOCKS.register("basalt_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BASALT)));
	public static final RegistryObject<Block> polished_basalt_fence = BLOCKS.register("polished_basalt_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BASALT)));
	public static final RegistryObject<Block> blackstone_fence = BLOCKS.register("blackstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BLACKSTONE)));
	public static final RegistryObject<Block> polished_blackstone_fence = BLOCKS.register("polished_blackstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BLACKSTONE)));
	public static final RegistryObject<Block> polished_blackstone_brick_fence = BLOCKS.register("polished_blackstone_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BLACKSTONE_BRICKS)));
	public static final RegistryObject<Block> cracked_polished_blackstone_brick_fence = BLOCKS.register("cracked_polished_blackstone_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_polished_blackstone_fence = BLOCKS.register("chiseled_polished_blackstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_POLISHED_BLACKSTONE)));
	public static final RegistryObject<Block> gilded_blackstone_fence = BLOCKS.register("gilded_blackstone_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.GILDED_BLACKSTONE)));
	public static final RegistryObject<Block> chiseled_nether_brick_fence = BLOCKS.register("chiseled_nether_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_NETHER_BRICKS)));
	public static final RegistryObject<Block> cracked_nether_brick_fence = BLOCKS.register("cracked_nether_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_NETHER_BRICKS)));
	public static final RegistryObject<Block> quartz_brick_fence = BLOCKS.register("quartz_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_BRICKS)));
	public static final RegistryObject<Block> AMETHYST_BLOCK_FENCE = BLOCKS.register("amethyst_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.AMETHYST_BLOCK)));
	public static final RegistryObject<Block> BUDDING_AMETHYST_FENCE = BLOCKS.register("budding_amethyst_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BUDDING_AMETHYST)));
	public static final RegistryObject<Block> TUFF_FENCE = BLOCKS.register("tuff_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.TUFF)));
	public static final RegistryObject<Block> CALCITE_FENCE = BLOCKS.register("calcite_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CALCITE)));
	public static final RegistryObject<Block> COPPER_ORE_FENCE = BLOCKS.register("copper_ore_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_COPPER_ORE_FENCE = BLOCKS.register("deepslate_copper_ore_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COPPER_ORE)));
	public static final RegistryObject<Block> COPPER_BLOCK_FENCE = BLOCKS.register("copper_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_BLOCK)));
	public static final RegistryObject<Block> EXPOSED_COPPER_FENCE = BLOCKS.register("exposed_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.EXPOSED_COPPER)));
	public static final RegistryObject<Block> WEATHERED_COPPER_FENCE = BLOCKS.register("weathered_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WEATHERED_COPPER)));
	public static final RegistryObject<Block> OXIDIZED_COPPER_FENCE = BLOCKS.register("oxidized_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OXIDIZED_COPPER)));
	public static final RegistryObject<Block> CUT_COPPER_FENCE = BLOCKS.register("cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CUT_COPPER)));
	public static final RegistryObject<Block> EXPOSED_CUT_COPPER_FENCE = BLOCKS.register("exposed_cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.EXPOSED_CUT_COPPER)));
	public static final RegistryObject<Block> WEATHERED_CUT_COPPER_FENCE = BLOCKS.register("weathered_cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WEATHERED_CUT_COPPER)));
	public static final RegistryObject<Block> OXIDIZED_CUT_COPPER_FENCE = BLOCKS.register("oxidized_cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OXIDIZED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_COPPER_BLOCK_FENCE = BLOCKS.register("waxed_copper_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_COPPER_BLOCK)));
	public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_FENCE = BLOCKS.register("waxed_exposed_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_FENCE = BLOCKS.register("waxed_weathered_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_FENCE = BLOCKS.register("waxed_oxidized_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_COPPER)));
	public static final RegistryObject<Block> WAXED_CUT_COPPER_FENCE = BLOCKS.register("waxed_cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_EXPOSED_CUT_COPPER_FENCE = BLOCKS.register("waxed_exposed_cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_CUT_COPPER_FENCE = BLOCKS.register("waxed_weathered_cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_CUT_COPPER_FENCE = BLOCKS.register("waxed_oxidized_cut_copper_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_CUT_COPPER)));
	public static final RegistryObject<Block> DRIPSTONE_BLOCK_FENCE = BLOCKS.register("dripstone_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DRIPSTONE_BLOCK)));
	public static final RegistryObject<Block> MOSS_BLOCK_FENCE = BLOCKS.register("moss_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.MOSS_BLOCK)));
	public static final RegistryObject<Block> ROOTED_DIRT_FENCE = BLOCKS.register("rooted_dirt_fence", () -> new FlattenableFence(BlockBehaviour.Properties.copy(Blocks.ROOTED_DIRT)));
	public static final RegistryObject<Block> DEEPSLATE_FENCE = BLOCKS.register("deepslate_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE)));
	public static final RegistryObject<Block> COBBLED_DEEPSLATE_FENCE = BLOCKS.register("cobbled_deepslate_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.COBBLED_DEEPSLATE)));
	public static final RegistryObject<Block> POLISHED_DEEPSLATE_FENCE = BLOCKS.register("polished_deepslate_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_DEEPSLATE)));
	public static final RegistryObject<Block> DEEPSLATE_TILE_FENCE = BLOCKS.register("deepslate_tile_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_TILES)));
	public static final RegistryObject<Block> DEEPSLATE_BRICK_FENCE = BLOCKS.register("deepslate_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_BRICKS)));
	public static final RegistryObject<Block> CHISELED_DEEPSLATE_FENCE = BLOCKS.register("chiseled_deepslate_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_DEEPSLATE)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_TILE_FENCE = BLOCKS.register("cracked_deepslate_tile_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_TILES)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_BRICK_FENCE = BLOCKS.register("cracked_deepslate_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_BRICKS)));
	public static final RegistryObject<Block> SMOOTH_BASALT_FENCE = BLOCKS.register("smooth_basalt_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_BASALT)));
	public static final RegistryObject<Block> RAW_IRON_BLOCK_FENCE = BLOCKS.register("raw_iron_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RAW_IRON_BLOCK)));
	public static final RegistryObject<Block> RAW_COPPER_BLOCK_FENCE = BLOCKS.register("raw_copper_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RAW_COPPER_BLOCK)));
	public static final RegistryObject<Block> RAW_GOLD_BLOCK_FENCE = BLOCKS.register("raw_gold_block_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.RAW_GOLD_BLOCK)));

	public static final RegistryObject<Block> farmland_slab = BLOCKS.register("farmland_slab", () -> new FarmSlab(BlockBehaviour.Properties.copy(Blocks.FARMLAND)));
	public static final RegistryObject<Block> grass_block_slab = BLOCKS.register("grass_block_slab", () -> new GrassBlockSlab(BlockBehaviour.Properties.copy(Blocks.GRASS_BLOCK)));
	public static final RegistryObject<Block> dirt_slab = BLOCKS.register("dirt_slab", () -> new DirtSlab(BlockBehaviour.Properties.copy(Blocks.DIRT)));
	public static final RegistryObject<Block> coarse_dirt_slab = BLOCKS.register("coarse_dirt_slab", () -> new CoarseDirtSlab(BlockBehaviour.Properties.copy(Blocks.COARSE_DIRT)));
	public static final RegistryObject<Block> podzol_slab = BLOCKS.register("podzol_slab", () -> new FlattenableSlab(BlockBehaviour.Properties.copy(Blocks.PODZOL)));
	public static final RegistryObject<Block> bedrock_slab = BLOCKS.register("bedrock_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BEDROCK)));
	public static final RegistryObject<Block> sand_slab = BLOCKS.register("sand_slab", () -> new FallingSlab(BlockBehaviour.Properties.copy(Blocks.SAND)));
	public static final RegistryObject<Block> red_sand_slab = BLOCKS.register("red_sand_slab", () -> new FallingSlab(BlockBehaviour.Properties.copy(Blocks.RED_SAND)));
	public static final RegistryObject<Block> gravel_slab = BLOCKS.register("gravel_slab", () -> new FallingSlab(BlockBehaviour.Properties.copy(Blocks.GRAVEL)));
	public static final RegistryObject<Block> gold_ore_slab = BLOCKS.register("gold_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.GOLD_ORE)));
	public static final RegistryObject<Block> iron_ore_slab = BLOCKS.register("iron_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.IRON_ORE)));
	public static final RegistryObject<Block> coal_ore_slab = BLOCKS.register("coal_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.COAL_ORE), UniformInt.of(0, 1)));
	public static final RegistryObject<Block> nether_gold_ore_slab = BLOCKS.register("nether_gold_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.NETHER_GOLD_ORE), UniformInt.of(0, 1)));
	public static final RegistryObject<Block> oak_log_slab = BLOCKS.register("oak_log_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_log_slab = BLOCKS.register("spruce_log_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_log_slab = BLOCKS.register("birch_log_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_log_slab = BLOCKS.register("jungle_log_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_log_slab = BLOCKS.register("acacia_log_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_log_slab = BLOCKS.register("dark_oak_log_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_log_slab = BLOCKS.register("stripped_oak_log_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_log_slab = BLOCKS.register("stripped_spruce_log_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_log_slab = BLOCKS.register("stripped_birch_log_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_log_slab = BLOCKS.register("stripped_jungle_log_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_log_slab = BLOCKS.register("stripped_acacia_log_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_log_slab = BLOCKS.register("stripped_dark_oak_log_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_wood_slab = BLOCKS.register("oak_wood_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_wood_slab = BLOCKS.register("spruce_wood_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_wood_slab = BLOCKS.register("birch_wood_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_wood_slab = BLOCKS.register("jungle_wood_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_wood_slab = BLOCKS.register("acacia_wood_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_wood_slab = BLOCKS.register("dark_oak_wood_slab", () -> new LogSlab(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_wood_slab = BLOCKS.register("stripped_oak_wood_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_wood_slab = BLOCKS.register("stripped_spruce_wood_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_wood_slab = BLOCKS.register("stripped_birch_wood_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_wood_slab = BLOCKS.register("stripped_jungle_wood_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_wood_slab = BLOCKS.register("stripped_acacia_wood_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_wood_slab = BLOCKS.register("stripped_dark_oak_wood_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_leaves_slab = BLOCKS.register("oak_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> spruce_leaves_slab = BLOCKS.register("spruce_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> birch_leaves_slab = BLOCKS.register("birch_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> jungle_leaves_slab = BLOCKS.register("jungle_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> acacia_leaves_slab = BLOCKS.register("acacia_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> dark_oak_leaves_slab = BLOCKS.register("dark_oak_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> sponge_slab = BLOCKS.register("sponge_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SPONGE)));
	public static final RegistryObject<Block> wet_sponge_slab = BLOCKS.register("wet_sponge_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WET_SPONGE)));
	public static final RegistryObject<Block> glass_slab = BLOCKS.register("glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GLASS)));
	public static final RegistryObject<Block> lapis_ore_slab = BLOCKS.register("lapis_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.LAPIS_ORE), UniformInt.of(1, 3)));
	public static final RegistryObject<Block> lapis_block_slab = BLOCKS.register("lapis_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LAPIS_BLOCK)));
	public static final RegistryObject<Block> chiseled_sandstone_slab = BLOCKS.register("chiseled_sandstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_SANDSTONE)));
	public static final RegistryObject<Block> white_wool_slab = BLOCKS.register("white_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_WOOL)));
	public static final RegistryObject<Block> orange_wool_slab = BLOCKS.register("orange_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_WOOL)));
	public static final RegistryObject<Block> magenta_wool_slab = BLOCKS.register("magenta_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_WOOL)));
	public static final RegistryObject<Block> light_blue_wool_slab = BLOCKS.register("light_blue_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_WOOL)));
	public static final RegistryObject<Block> yellow_wool_slab = BLOCKS.register("yellow_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_WOOL)));
	public static final RegistryObject<Block> lime_wool_slab = BLOCKS.register("lime_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIME_WOOL)));
	public static final RegistryObject<Block> pink_wool_slab = BLOCKS.register("pink_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PINK_WOOL)));
	public static final RegistryObject<Block> gray_wool_slab = BLOCKS.register("gray_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_WOOL)));
	public static final RegistryObject<Block> light_gray_wool_slab = BLOCKS.register("light_gray_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL)));
	public static final RegistryObject<Block> cyan_wool_slab = BLOCKS.register("cyan_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_WOOL)));
	public static final RegistryObject<Block> purple_wool_slab = BLOCKS.register("purple_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_WOOL)));
	public static final RegistryObject<Block> blue_wool_slab = BLOCKS.register("blue_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_WOOL)));
	public static final RegistryObject<Block> brown_wool_slab = BLOCKS.register("brown_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_WOOL)));
	public static final RegistryObject<Block> green_wool_slab = BLOCKS.register("green_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_WOOL)));
	public static final RegistryObject<Block> red_wool_slab = BLOCKS.register("red_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RED_WOOL)));
	public static final RegistryObject<Block> black_wool_slab = BLOCKS.register("black_wool_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_WOOL)));
	public static final RegistryObject<Block> gold_block_slab = BLOCKS.register("gold_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GOLD_BLOCK)));
	public static final RegistryObject<Block> iron_block_slab = BLOCKS.register("iron_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK)));
	public static final RegistryObject<Block> tnt_slab = BLOCKS.register("tnt_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.TNT)));
	public static final RegistryObject<Block> bookshelf_slab = BLOCKS.register("bookshelf_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BOOKSHELF)));
	public static final RegistryObject<Block> obsidian_slab = BLOCKS.register("obsidian_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
	public static final RegistryObject<Block> spawner_slab = BLOCKS.register("spawner_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SPAWNER)));
	public static final RegistryObject<Block> diamond_ore_slab = BLOCKS.register("diamond_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.DIAMOND_ORE), UniformInt.of(2, 4)));
	public static final RegistryObject<Block> diamond_block_slab = BLOCKS.register("diamond_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DIAMOND_BLOCK)));
	public static final RegistryObject<Block> redstone_ore_slab = BLOCKS.register("redstone_ore_slab", () -> new RedstoneOreSlab(BlockBehaviour.Properties.copy(Blocks.REDSTONE_ORE)));
	public static final RegistryObject<Block> ice_slab = BLOCKS.register("ice_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.ICE).friction(0.98F).strength(0.5F).sound(SoundType.GLASS).noOcclusion()));
	public static final RegistryObject<Block> snow_block_slab = BLOCKS.register("snow_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
	public static final RegistryObject<Block> clay_slab = BLOCKS.register("clay_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CLAY)));
	public static final RegistryObject<Block> pumpkin_slab = BLOCKS.register("pumpkin_slab", () -> new PumpkinSlab(BlockBehaviour.Properties.copy(Blocks.PUMPKIN)));
	public static final RegistryObject<Block> netherrack_slab = BLOCKS.register("netherrack_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
	public static final RegistryObject<Block> soul_sand_slab = BLOCKS.register("soul_sand_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_BROWN).strength(0.5F).speedFactor(0.4F).sound(SoundType.SAND)));
	public static final RegistryObject<Block> soul_soil_slab = BLOCKS.register("soul_soil_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_SOIL)));
	public static final RegistryObject<Block> glowstone_slab = BLOCKS.register("glowstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GLOWSTONE)));
	public static final RegistryObject<Block> carved_pumpkin_slab = BLOCKS.register("carved_pumpkin_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CARVED_PUMPKIN)));
	public static final RegistryObject<Block> jack_o_lantern_slab = BLOCKS.register("jack_o_lantern_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.JACK_O_LANTERN)));
	public static final RegistryObject<Block> white_stained_glass_slab = BLOCKS.register("white_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_STAINED_GLASS)));
	public static final RegistryObject<Block> orange_stained_glass_slab = BLOCKS.register("orange_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_STAINED_GLASS)));
	public static final RegistryObject<Block> magenta_stained_glass_slab = BLOCKS.register("magenta_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_STAINED_GLASS)));
	public static final RegistryObject<Block> light_blue_stained_glass_slab = BLOCKS.register("light_blue_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> yellow_stained_glass_slab = BLOCKS.register("yellow_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_STAINED_GLASS)));
	public static final RegistryObject<Block> lime_stained_glass_slab = BLOCKS.register("lime_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIME_STAINED_GLASS)));
	public static final RegistryObject<Block> pink_stained_glass_slab = BLOCKS.register("pink_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PINK_STAINED_GLASS)));
	public static final RegistryObject<Block> gray_stained_glass_slab = BLOCKS.register("gray_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> light_gray_stained_glass_slab = BLOCKS.register("light_gray_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> cyan_stained_glass_slab = BLOCKS.register("cyan_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_STAINED_GLASS)));
	public static final RegistryObject<Block> purple_stained_glass_slab = BLOCKS.register("purple_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_STAINED_GLASS)));
	public static final RegistryObject<Block> blue_stained_glass_slab = BLOCKS.register("blue_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> brown_stained_glass_slab = BLOCKS.register("brown_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_STAINED_GLASS)));
	public static final RegistryObject<Block> green_stained_glass_slab = BLOCKS.register("green_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_STAINED_GLASS)));
	public static final RegistryObject<Block> red_stained_glass_slab = BLOCKS.register("red_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RED_STAINED_GLASS)));
	public static final RegistryObject<Block> black_stained_glass_slab = BLOCKS.register("black_stained_glass_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_STAINED_GLASS)));
	public static final RegistryObject<Block> oak_trapdoor_slab = BLOCKS.register("oak_trapdoor_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.OAK_TRAPDOOR)));
	public static final RegistryObject<Block> spruce_trapdoor_slab = BLOCKS.register("spruce_trapdoor_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_TRAPDOOR)));
	public static final RegistryObject<Block> birch_trapdoor_slab = BLOCKS.register("birch_trapdoor_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_TRAPDOOR)));
	public static final RegistryObject<Block> jungle_trapdoor_slab = BLOCKS.register("jungle_trapdoor_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_TRAPDOOR)));
	public static final RegistryObject<Block> acacia_trapdoor_slab = BLOCKS.register("acacia_trapdoor_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_TRAPDOOR)));
	public static final RegistryObject<Block> dark_oak_trapdoor_slab = BLOCKS.register("dark_oak_trapdoor_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_TRAPDOOR)));
	public static final RegistryObject<Block> cracked_stone_brick_slab = BLOCKS.register("cracked_stone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_STONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_stone_brick_slab = BLOCKS.register("chiseled_stone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_STONE_BRICKS)));
	public static final RegistryObject<Block> brown_mushroom_block_slab = BLOCKS.register("brown_mushroom_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> red_mushroom_block_slab = BLOCKS.register("red_mushroom_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RED_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> mushroom_stem_slab = BLOCKS.register("mushroom_stem_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MUSHROOM_STEM)));
	public static final RegistryObject<Block> iron_bars_slab = BLOCKS.register("iron_bars_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BARS)));
	public static final RegistryObject<Block> melon_slab = BLOCKS.register("melon_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MELON)));
	public static final RegistryObject<Block> vine_slab = BLOCKS.register("vine_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().strength(0.2F).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> mycelium_slab = BLOCKS.register("mycelium_slab", () -> new MyceliumSlab(BlockBehaviour.Properties.copy(Blocks.MYCELIUM)));
	public static final RegistryObject<Block> end_stone_slab = BLOCKS.register("end_stone_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.END_STONE)));
	public static final RegistryObject<Block> dragon_egg_slab = BLOCKS.register("dragon_egg_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DRAGON_EGG)));
	public static final RegistryObject<Block> redstone_lamp_slab = BLOCKS.register("redstone_lamp_slab", () -> new RedstoneLampSlab(BlockBehaviour.Properties.copy(Blocks.REDSTONE_LAMP)));
	public static final RegistryObject<Block> emerald_ore_slab = BLOCKS.register("emerald_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.EMERALD_ORE), UniformInt.of(2, 4)));
	public static final RegistryObject<Block> emerald_block_slab = BLOCKS.register("emerald_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.EMERALD_BLOCK)));
	public static final RegistryObject<Block> redstone_block_slab = BLOCKS.register("redstone_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.REDSTONE_BLOCK)));
	public static final RegistryObject<Block> nether_quartz_ore_slab = BLOCKS.register("nether_quartz_ore_slab", () -> new OreSlab(BlockBehaviour.Properties.copy(Blocks.NETHER_QUARTZ_ORE), UniformInt.of(1, 3)));
	public static final RegistryObject<Block> hopper_slab = BLOCKS.register("hopper_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.HOPPER)));
	public static final RegistryObject<Block> chiseled_quartz_block_slab = BLOCKS.register("chiseled_quartz_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_QUARTZ_BLOCK)));
	public static final RegistryObject<Block> quartz_pillar_slab = BLOCKS.register("quartz_pillar_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_PILLAR)));
	public static final RegistryObject<Block> white_terracotta_slab = BLOCKS.register("white_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
	public static final RegistryObject<Block> orange_terracotta_slab = BLOCKS.register("orange_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_terracotta_slab = BLOCKS.register("magenta_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_terracotta_slab = BLOCKS.register("light_blue_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_terracotta_slab = BLOCKS.register("yellow_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
	public static final RegistryObject<Block> lime_terracotta_slab = BLOCKS.register("lime_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
	public static final RegistryObject<Block> pink_terracotta_slab = BLOCKS.register("pink_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
	public static final RegistryObject<Block> gray_terracotta_slab = BLOCKS.register("gray_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_terracotta_slab = BLOCKS.register("light_gray_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_terracotta_slab = BLOCKS.register("cyan_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
	public static final RegistryObject<Block> purple_terracotta_slab = BLOCKS.register("purple_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
	public static final RegistryObject<Block> blue_terracotta_slab = BLOCKS.register("blue_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> brown_terracotta_slab = BLOCKS.register("brown_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
	public static final RegistryObject<Block> green_terracotta_slab = BLOCKS.register("green_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
	public static final RegistryObject<Block> red_terracotta_slab = BLOCKS.register("red_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
	public static final RegistryObject<Block> black_terracotta_slab = BLOCKS.register("black_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
	public static final RegistryObject<Block> slime_block_slab = BLOCKS.register("slime_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SLIME_BLOCK)));
	public static final RegistryObject<Block> iron_trapdoor_slab = BLOCKS.register("iron_trapdoor_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.IRON_TRAPDOOR)));
	public static final RegistryObject<Block> sea_lantern_slab = BLOCKS.register("sea_lantern_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SEA_LANTERN)));
	public static final RegistryObject<Block> hay_block_slab = BLOCKS.register("hay_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.HAY_BLOCK)));
	public static final RegistryObject<Block> terracotta_slab = BLOCKS.register("terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
	public static final RegistryObject<Block> coal_block_slab = BLOCKS.register("coal_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.COAL_BLOCK)));
	public static final RegistryObject<Block> packed_ice_slab = BLOCKS.register("packed_ice_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)));
	public static final RegistryObject<Block> chiseled_red_sandstone_slab = BLOCKS.register("chiseled_red_sandstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_RED_SANDSTONE)));
	public static final RegistryObject<Block> purpur_pillar_slab = BLOCKS.register("purpur_pillar_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PURPUR_PILLAR)));
	public static final RegistryObject<Block> dirt_path_slab = BLOCKS.register("dirt_path_slab", () -> new DirtPathSlab(BlockBehaviour.Properties.copy(Blocks.DIRT_PATH)));
	public static final RegistryObject<Block> magma_block_slab = BLOCKS.register("magma_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).lightLevel((state) -> 3).strength(0.5F)));
	public static final RegistryObject<Block> nether_wart_block_slab = BLOCKS.register("nether_wart_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_WART_BLOCK)));
	public static final RegistryObject<Block> bone_block_slab = BLOCKS.register("bone_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BONE_BLOCK)));
	public static final RegistryObject<Block> white_glazed_terracotta_slab = BLOCKS.register("white_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> orange_glazed_terracotta_slab = BLOCKS.register("orange_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_glazed_terracotta_slab = BLOCKS.register("magenta_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_glazed_terracotta_slab = BLOCKS.register("light_blue_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_glazed_terracotta_slab = BLOCKS.register("yellow_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> lime_glazed_terracotta_slab = BLOCKS.register("lime_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIME_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> pink_glazed_terracotta_slab = BLOCKS.register("pink_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PINK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> gray_glazed_terracotta_slab = BLOCKS.register("gray_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_glazed_terracotta_slab = BLOCKS.register("light_gray_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_glazed_terracotta_slab = BLOCKS.register("cyan_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> purple_glazed_terracotta_slab = BLOCKS.register("purple_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> blue_glazed_terracotta_slab = BLOCKS.register("blue_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> brown_glazed_terracotta_slab = BLOCKS.register("brown_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> green_glazed_terracotta_slab = BLOCKS.register("green_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> red_glazed_terracotta_slab = BLOCKS.register("red_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RED_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> black_glazed_terracotta_slab = BLOCKS.register("black_glazed_terracotta_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> white_concrete_slab = BLOCKS.register("white_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE)));
	public static final RegistryObject<Block> orange_concrete_slab = BLOCKS.register("orange_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE)));
	public static final RegistryObject<Block> magenta_concrete_slab = BLOCKS.register("magenta_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE)));
	public static final RegistryObject<Block> light_blue_concrete_slab = BLOCKS.register("light_blue_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE)));
	public static final RegistryObject<Block> yellow_concrete_slab = BLOCKS.register("yellow_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE)));
	public static final RegistryObject<Block> lime_concrete_slab = BLOCKS.register("lime_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE)));
	public static final RegistryObject<Block> pink_concrete_slab = BLOCKS.register("pink_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE)));
	public static final RegistryObject<Block> gray_concrete_slab = BLOCKS.register("gray_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE)));
	public static final RegistryObject<Block> light_gray_concrete_slab = BLOCKS.register("light_gray_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE)));
	public static final RegistryObject<Block> cyan_concrete_slab = BLOCKS.register("cyan_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE)));
	public static final RegistryObject<Block> purple_concrete_slab = BLOCKS.register("purple_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE)));
	public static final RegistryObject<Block> blue_concrete_slab = BLOCKS.register("blue_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE)));
	public static final RegistryObject<Block> brown_concrete_slab = BLOCKS.register("brown_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE)));
	public static final RegistryObject<Block> green_concrete_slab = BLOCKS.register("green_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE)));
	public static final RegistryObject<Block> red_concrete_slab = BLOCKS.register("red_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE)));
	public static final RegistryObject<Block> black_concrete_slab = BLOCKS.register("black_concrete_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE)));
	public static final RegistryObject<Block> white_concrete_powder_slab = BLOCKS.register("white_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> orange_concrete_powder_slab = BLOCKS.register("orange_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> magenta_concrete_powder_slab = BLOCKS.register("magenta_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_blue_concrete_powder_slab = BLOCKS.register("light_blue_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> yellow_concrete_powder_slab = BLOCKS.register("yellow_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE_POWDER)));
	public static final RegistryObject<Block> lime_concrete_powder_slab = BLOCKS.register("lime_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE_POWDER)));
	public static final RegistryObject<Block> pink_concrete_powder_slab = BLOCKS.register("pink_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> gray_concrete_powder_slab = BLOCKS.register("gray_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_gray_concrete_powder_slab = BLOCKS.register("light_gray_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> cyan_concrete_powder_slab = BLOCKS.register("cyan_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> purple_concrete_powder_slab = BLOCKS.register("purple_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> blue_concrete_powder_slab = BLOCKS.register("blue_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> brown_concrete_powder_slab = BLOCKS.register("brown_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> green_concrete_powder_slab = BLOCKS.register("green_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> red_concrete_powder_slab = BLOCKS.register("red_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE_POWDER)));
	public static final RegistryObject<Block> black_concrete_powder_slab = BLOCKS.register("black_concrete_powder_slab", () -> new ConcretePowderSlab(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> dried_kelp_block_slab = BLOCKS.register("dried_kelp_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DRIED_KELP_BLOCK)));
	public static final RegistryObject<Block> dead_tube_coral_block_slab = BLOCKS.register("dead_tube_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_brain_coral_block_slab = BLOCKS.register("dead_brain_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_bubble_coral_block_slab = BLOCKS.register("dead_bubble_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_fire_coral_block_slab = BLOCKS.register("dead_fire_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_horn_coral_block_slab = BLOCKS.register("dead_horn_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> tube_coral_block_slab = BLOCKS.register("tube_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> brain_coral_block_slab = BLOCKS.register("brain_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> bubble_coral_block_slab = BLOCKS.register("bubble_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> fire_coral_block_slab = BLOCKS.register("fire_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> horn_coral_block_slab = BLOCKS.register("horn_coral_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> blue_ice_slab = BLOCKS.register("blue_ice_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_ICE)));
	public static final RegistryObject<Block> honey_block_slab = BLOCKS.register("honey_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.HONEY_BLOCK)));
	public static final RegistryObject<Block> honeycomb_block_slab = BLOCKS.register("honeycomb_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.HONEYCOMB_BLOCK)));
	public static final RegistryObject<Block> warped_stem_slab = BLOCKS.register("warped_stem_slab", () -> new LogSlab(BlockBehaviour.Properties.copy(Blocks.WARPED_STEM)));
	public static final RegistryObject<Block> stripped_warped_stem_slab = BLOCKS.register("stripped_warped_stem_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_STEM)));
	public static final RegistryObject<Block> warped_hyphae_slab = BLOCKS.register("warped_hyphae_slab", () -> new LogSlab(BlockBehaviour.Properties.copy(Blocks.WARPED_HYPHAE)));
	public static final RegistryObject<Block> stripped_warped_hyphae_slab = BLOCKS.register("stripped_warped_hyphae_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_HYPHAE)));
	public static final RegistryObject<Block> warped_nylium_slab = BLOCKS.register("warped_nylium_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_NYLIUM)));
	public static final RegistryObject<Block> warped_wart_block_slab = BLOCKS.register("warped_wart_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_WART_BLOCK)));
	public static final RegistryObject<Block> crimson_stem_slab = BLOCKS.register("crimson_stem_slab", () -> new LogSlab(BlockBehaviour.Properties.copy(Blocks.CRIMSON_STEM)));
	public static final RegistryObject<Block> stripped_crimson_stem_slab = BLOCKS.register("stripped_crimson_stem_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_STEM)));
	public static final RegistryObject<Block> crimson_hyphae_slab = BLOCKS.register("crimson_hyphae_slab", () -> new LogSlab(BlockBehaviour.Properties.copy(Blocks.CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> stripped_crimson_hyphae_slab = BLOCKS.register("stripped_crimson_hyphae_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> crimson_nylium_slab = BLOCKS.register("crimson_nylium_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_NYLIUM)));
	public static final RegistryObject<Block> shroomlight_slab = BLOCKS.register("shroomlight_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SHROOMLIGHT)));
	public static final RegistryObject<Block> netherite_block_slab = BLOCKS.register("netherite_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.NETHERITE_BLOCK)));
	public static final RegistryObject<Block> ancient_debris_slab = BLOCKS.register("ancient_debris_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.ANCIENT_DEBRIS)));
	public static final RegistryObject<Block> crying_obsidian_slab = BLOCKS.register("crying_obsidian_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CRYING_OBSIDIAN)));
	public static final RegistryObject<Block> basalt_slab = BLOCKS.register("basalt_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BASALT)));
	public static final RegistryObject<Block> polished_basalt_slab = BLOCKS.register("polished_basalt_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BASALT)));
	public static final RegistryObject<Block> cracked_polished_blackstone_brick_slab = BLOCKS.register("cracked_polished_blackstone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_polished_blackstone_slab = BLOCKS.register("chiseled_polished_blackstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_POLISHED_BLACKSTONE)));
	public static final RegistryObject<Block> gilded_blackstone_slab = BLOCKS.register("gilded_blackstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GILDED_BLACKSTONE)));
	public static final RegistryObject<Block> chiseled_nether_brick_slab = BLOCKS.register("chiseled_nether_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_NETHER_BRICKS)));
	public static final RegistryObject<Block> cracked_nether_brick_slab = BLOCKS.register("cracked_nether_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_NETHER_BRICKS)));
	public static final RegistryObject<Block> quartz_brick_slab = BLOCKS.register("quartz_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_BRICKS)));
	public static final RegistryObject<Block> AMETHYST_BLOCK_SLAB = BLOCKS.register("amethyst_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.AMETHYST_BLOCK)));
	public static final RegistryObject<Block> AZALEA_LEAVES_SLAB = BLOCKS.register("azalea_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.AZALEA_LEAVES)));
	public static final RegistryObject<Block> BUDDING_AMETHYST_SLAB = BLOCKS.register("budding_amethyst_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.BUDDING_AMETHYST)));
	public static final RegistryObject<Block> CALCITE_SLAB = BLOCKS.register("calcite_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CALCITE)));
	public static final RegistryObject<Block> CHISELED_DEEPSLATE_SLAB = BLOCKS.register("chiseled_deepslate_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_DEEPSLATE)));
	public static final RegistryObject<Block> COPPER_BLOCK_SLAB = BLOCKS.register("copper_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_BLOCK)));
	public static final RegistryObject<Block> COPPER_ORE_SLAB = BLOCKS.register("copper_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_ORE)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_BRICK_SLAB = BLOCKS.register("cracked_deepslate_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_BRICKS)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_TILE_SLAB = BLOCKS.register("cracked_deepslate_tile_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_TILES)));
	public static final RegistryObject<Block> DEEPSLATE_COAL_ORE_SLAB = BLOCKS.register("deepslate_coal_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COAL_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_COPPER_ORE_SLAB = BLOCKS.register("deepslate_copper_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COPPER_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_DIAMOND_ORE_SLAB = BLOCKS.register("deepslate_diamond_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_DIAMOND_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_EMERALD_ORE_SLAB = BLOCKS.register("deepslate_emerald_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_EMERALD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_GOLD_ORE_SLAB = BLOCKS.register("deepslate_gold_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_GOLD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_IRON_ORE_SLAB = BLOCKS.register("deepslate_iron_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_IRON_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_LAPIS_ORE_SLAB = BLOCKS.register("deepslate_lapis_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_LAPIS_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_REDSTONE_ORE_SLAB = BLOCKS.register("deepslate_redstone_ore_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().lightLevel(/*litBlockEmission(9)*/ state -> 9).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
	public static final RegistryObject<Block> DEEPSLATE_SLAB = BLOCKS.register("deepslate_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE)));
	public static final RegistryObject<Block> DRIPSTONE_BLOCK_SLAB = BLOCKS.register("dripstone_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.DRIPSTONE_BLOCK)));
	public static final RegistryObject<Block> EXPOSED_COPPER_SLAB = BLOCKS.register("exposed_copper_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.EXPOSED_COPPER)));
	public static final RegistryObject<Block> FLOWERING_AZALEA_LEAVES_SLAB = BLOCKS.register("flowering_azalea_leaves_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.FLOWERING_AZALEA_LEAVES)));
	public static final RegistryObject<Block> GLOW_LICHEN_SLAB = BLOCKS.register("glow_lichen_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.GLOW_LICHEN)));
	public static final RegistryObject<Block> MOSS_BLOCK_SLAB = BLOCKS.register("moss_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.MOSS_BLOCK)));
	public static final RegistryObject<Block> OXIDIZED_COPPER_SLAB = BLOCKS.register("oxidized_copper_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.OXIDIZED_COPPER)));
	public static final RegistryObject<Block> RAW_COPPER_BLOCK_SLAB = BLOCKS.register("raw_copper_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RAW_COPPER_BLOCK)));
	public static final RegistryObject<Block> RAW_GOLD_BLOCK_SLAB = BLOCKS.register("raw_gold_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RAW_GOLD_BLOCK)));
	public static final RegistryObject<Block> RAW_IRON_BLOCK_SLAB = BLOCKS.register("raw_iron_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.RAW_IRON_BLOCK)));
	public static final RegistryObject<Block> ROOTED_DIRT_SLAB = BLOCKS.register("rooted_dirt_slab", () -> new FlattenableSlab(BlockBehaviour.Properties.copy(Blocks.ROOTED_DIRT)));
	public static final RegistryObject<Block> SMOOTH_BASALT_SLAB = BLOCKS.register("smooth_basalt_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_BASALT)));
	public static final RegistryObject<Block> TUFF_SLAB = BLOCKS.register("tuff_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.TUFF)));
	public static final RegistryObject<Block> WAXED_COPPER_BLOCK_SLAB = BLOCKS.register("waxed_copper_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_COPPER_BLOCK)));
	public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_SLAB = BLOCKS.register("waxed_exposed_copper_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_SLAB = BLOCKS.register("waxed_oxidized_copper_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_SLAB = BLOCKS.register("waxed_weathered_copper_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_COPPER)));
	public static final RegistryObject<Block> WEATHERED_COPPER_SLAB = BLOCKS.register("weathered_copper_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.WEATHERED_COPPER)));

	public static final RegistryObject<Block> farmland_stairs = BLOCKS.register("farmland_stairs", () -> new FarmStairs(BlockBehaviour.Properties.copy(Blocks.FARMLAND)));
	public static final RegistryObject<Block> grass_block_stairs = BLOCKS.register("grass_block_stairs", () -> new GrassBlockStairs(Blocks.GRASS_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GRASS_BLOCK)));
	public static final RegistryObject<Block> dirt_stairs = BLOCKS.register("dirt_stairs", () -> new DirtStairs(Blocks.DIRT::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DIRT)));
	public static final RegistryObject<Block> coarse_dirt_stairs = BLOCKS.register("coarse_dirt_stairs", () -> new CoarseDirtStairs(Blocks.COARSE_DIRT::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.COARSE_DIRT)));
	public static final RegistryObject<Block> podzol_stairs = BLOCKS.register("podzol_stairs", () -> new FlattenableStairs(Blocks.PODZOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PODZOL)));
	public static final RegistryObject<Block> bedrock_stairs = BLOCKS.register("bedrock_stairs", () -> new StairBlock(Blocks.BEDROCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BEDROCK)));
	public static final RegistryObject<Block> sand_stairs = BLOCKS.register("sand_stairs", () -> new FallingStairs(BlockBehaviour.Properties.copy(Blocks.SAND)));
	public static final RegistryObject<Block> red_sand_stairs = BLOCKS.register("red_sand_stairs", () -> new FallingStairs(BlockBehaviour.Properties.copy(Blocks.RED_SAND)));
	public static final RegistryObject<Block> gravel_stairs = BLOCKS.register("gravel_stairs", () -> new FallingStairs(BlockBehaviour.Properties.copy(Blocks.GRAVEL)));
	public static final RegistryObject<Block> gold_ore_stairs = BLOCKS.register("gold_ore_stairs", () -> new OreStairs(Blocks.GOLD_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GOLD_ORE)));
	public static final RegistryObject<Block> iron_ore_stairs = BLOCKS.register("iron_ore_stairs", () -> new OreStairs(Blocks.IRON_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.IRON_ORE)));
	public static final RegistryObject<Block> coal_ore_stairs = BLOCKS.register("coal_ore_stairs", () -> new OreStairs(Blocks.COAL_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.COAL_ORE), UniformInt.of(0, 2)));
	public static final RegistryObject<Block> nether_gold_ore_stairs = BLOCKS.register("nether_gold_ore_stairs", () -> new OreStairs(Blocks.NETHER_GOLD_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.NETHER_GOLD_ORE), UniformInt.of(0, 1)));
	public static final RegistryObject<Block> oak_log_stairs = BLOCKS.register("oak_log_stairs", () -> new LogStairs(Blocks.OAK_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_log_stairs = BLOCKS.register("spruce_log_stairs", () -> new LogStairs(Blocks.SPRUCE_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_log_stairs = BLOCKS.register("birch_log_stairs", () -> new LogStairs(Blocks.BIRCH_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_log_stairs = BLOCKS.register("jungle_log_stairs", () -> new LogStairs(Blocks.JUNGLE_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_log_stairs = BLOCKS.register("acacia_log_stairs", () -> new LogStairs(Blocks.ACACIA_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_log_stairs = BLOCKS.register("dark_oak_log_stairs", () -> new LogStairs(Blocks.DARK_OAK_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_log_stairs = BLOCKS.register("stripped_oak_log_stairs", () -> new StairBlock(Blocks.STRIPPED_OAK_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_log_stairs = BLOCKS.register("stripped_spruce_log_stairs", () -> new StairBlock(Blocks.STRIPPED_SPRUCE_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_log_stairs = BLOCKS.register("stripped_birch_log_stairs", () -> new StairBlock(Blocks.STRIPPED_BIRCH_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_log_stairs = BLOCKS.register("stripped_jungle_log_stairs", () -> new StairBlock(Blocks.STRIPPED_JUNGLE_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_log_stairs = BLOCKS.register("stripped_acacia_log_stairs", () -> new StairBlock(Blocks.STRIPPED_ACACIA_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_log_stairs = BLOCKS.register("stripped_dark_oak_log_stairs", () -> new StairBlock(Blocks.STRIPPED_DARK_OAK_LOG::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_wood_stairs = BLOCKS.register("oak_wood_stairs", () -> new LogStairs(Blocks.OAK_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_wood_stairs = BLOCKS.register("spruce_wood_stairs", () -> new LogStairs(Blocks.SPRUCE_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_wood_stairs = BLOCKS.register("birch_wood_stairs", () -> new LogStairs(Blocks.BIRCH_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_wood_stairs = BLOCKS.register("jungle_wood_stairs", () -> new LogStairs(Blocks.JUNGLE_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_wood_stairs = BLOCKS.register("acacia_wood_stairs", () -> new LogStairs(Blocks.ACACIA_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_wood_stairs = BLOCKS.register("dark_oak_wood_stairs", () -> new LogStairs(Blocks.DARK_OAK_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_wood_stairs = BLOCKS.register("stripped_oak_wood_stairs", () -> new StairBlock(Blocks.STRIPPED_OAK_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_wood_stairs = BLOCKS.register("stripped_spruce_wood_stairs", () -> new StairBlock(Blocks.STRIPPED_SPRUCE_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_wood_stairs = BLOCKS.register("stripped_birch_wood_stairs", () -> new StairBlock(Blocks.STRIPPED_BIRCH_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_wood_stairs = BLOCKS.register("stripped_jungle_wood_stairs", () -> new StairBlock(Blocks.STRIPPED_JUNGLE_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_wood_stairs = BLOCKS.register("stripped_acacia_wood_stairs", () -> new StairBlock(Blocks.STRIPPED_ACACIA_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_wood_stairs = BLOCKS.register("stripped_dark_oak_wood_stairs", () -> new StairBlock(Blocks.STRIPPED_DARK_OAK_WOOD::defaultBlockState, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_leaves_stairs = BLOCKS.register("oak_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> spruce_leaves_stairs = BLOCKS.register("spruce_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> birch_leaves_stairs = BLOCKS.register("birch_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> jungle_leaves_stairs = BLOCKS.register("jungle_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> acacia_leaves_stairs = BLOCKS.register("acacia_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> dark_oak_leaves_stairs = BLOCKS.register("dark_oak_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> sponge_stairs = BLOCKS.register("sponge_stairs", () -> new StairBlock(Blocks.SPONGE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SPONGE)));
	public static final RegistryObject<Block> wet_sponge_stairs = BLOCKS.register("wet_sponge_stairs", () -> new StairBlock(Blocks.WET_SPONGE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WET_SPONGE)));
	public static final RegistryObject<Block> glass_stairs = BLOCKS.register("glass_stairs", () -> new StairBlock(Blocks.GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GLASS)));
	public static final RegistryObject<Block> lapis_ore_stairs = BLOCKS.register("lapis_ore_stairs", () -> new OreStairs(Blocks.LAPIS_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LAPIS_ORE), UniformInt.of(2,5)));
	public static final RegistryObject<Block> lapis_block_stairs = BLOCKS.register("lapis_block_stairs", () -> new StairBlock(Blocks.LAPIS_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LAPIS_BLOCK)));
	public static final RegistryObject<Block> chiseled_sandstone_stairs = BLOCKS.register("chiseled_sandstone_stairs", () -> new StairBlock(Blocks.CHISELED_SANDSTONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CHISELED_SANDSTONE)));
	public static final RegistryObject<Block> cut_sandstone_stairs = BLOCKS.register("cut_sandstone_stairs", () -> new StairBlock(Blocks.CUT_SANDSTONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CUT_SANDSTONE)));
	public static final RegistryObject<Block> white_wool_stairs = BLOCKS.register("white_wool_stairs", () -> new StairBlock(Blocks.WHITE_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WHITE_WOOL)));
	public static final RegistryObject<Block> orange_wool_stairs = BLOCKS.register("orange_wool_stairs", () -> new StairBlock(Blocks.ORANGE_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ORANGE_WOOL)));
	public static final RegistryObject<Block> magenta_wool_stairs = BLOCKS.register("magenta_wool_stairs", () -> new StairBlock(Blocks.MAGENTA_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MAGENTA_WOOL)));
	public static final RegistryObject<Block> light_blue_wool_stairs = BLOCKS.register("light_blue_wool_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_WOOL)));
	public static final RegistryObject<Block> yellow_wool_stairs = BLOCKS.register("yellow_wool_stairs", () -> new StairBlock(Blocks.YELLOW_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.YELLOW_WOOL)));
	public static final RegistryObject<Block> lime_wool_stairs = BLOCKS.register("lime_wool_stairs", () -> new StairBlock(Blocks.LIME_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIME_WOOL)));
	public static final RegistryObject<Block> pink_wool_stairs = BLOCKS.register("pink_wool_stairs", () -> new StairBlock(Blocks.PINK_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PINK_WOOL)));
	public static final RegistryObject<Block> gray_wool_stairs = BLOCKS.register("gray_wool_stairs", () -> new StairBlock(Blocks.GRAY_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GRAY_WOOL)));
	public static final RegistryObject<Block> light_gray_wool_stairs = BLOCKS.register("light_gray_wool_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL)));
	public static final RegistryObject<Block> cyan_wool_stairs = BLOCKS.register("cyan_wool_stairs", () -> new StairBlock(Blocks.CYAN_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CYAN_WOOL)));
	public static final RegistryObject<Block> purple_wool_stairs = BLOCKS.register("purple_wool_stairs", () -> new StairBlock(Blocks.PURPLE_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PURPLE_WOOL)));
	public static final RegistryObject<Block> blue_wool_stairs = BLOCKS.register("blue_wool_stairs", () -> new StairBlock(Blocks.BLUE_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLUE_WOOL)));
	public static final RegistryObject<Block> brown_wool_stairs = BLOCKS.register("brown_wool_stairs", () -> new StairBlock(Blocks.BROWN_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BROWN_WOOL)));
	public static final RegistryObject<Block> green_wool_stairs = BLOCKS.register("green_wool_stairs", () -> new StairBlock(Blocks.GREEN_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GREEN_WOOL)));
	public static final RegistryObject<Block> red_wool_stairs = BLOCKS.register("red_wool_stairs", () -> new StairBlock(Blocks.RED_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RED_WOOL)));
	public static final RegistryObject<Block> black_wool_stairs = BLOCKS.register("black_wool_stairs", () -> new StairBlock(Blocks.BLACK_WOOL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLACK_WOOL)));
	public static final RegistryObject<Block> gold_block_stairs = BLOCKS.register("gold_block_stairs", () -> new StairBlock(Blocks.GOLD_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GOLD_BLOCK)));
	public static final RegistryObject<Block> iron_block_stairs = BLOCKS.register("iron_block_stairs", () -> new StairBlock(Blocks.IRON_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK)));
	public static final RegistryObject<Block> tnt_stairs = BLOCKS.register("tnt_stairs", () -> new StairBlock(Blocks.IRON_BLOCK::defaultBlockState, BlockBehaviour.Properties.of(Material.METAL).instabreak().sound(SoundType.GRASS)));
	public static final RegistryObject<Block> bookshelf_stairs = BLOCKS.register("bookshelf_stairs", () -> new StairBlock(Blocks.BOOKSHELF::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BOOKSHELF)));
	public static final RegistryObject<Block> obsidian_stairs = BLOCKS.register("obsidian_stairs", () -> new StairBlock(Blocks.OBSIDIAN::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
	public static final RegistryObject<Block> spawner_stairs = BLOCKS.register("spawner_stairs", () -> new StairBlock(Blocks.SPAWNER::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SPAWNER)));
	public static final RegistryObject<Block> diamond_ore_stairs = BLOCKS.register("diamond_ore_stairs", () -> new OreStairs(Blocks.DIAMOND_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DIAMOND_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> diamond_block_stairs = BLOCKS.register("diamond_block_stairs", () -> new StairBlock(Blocks.DIAMOND_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DIAMOND_BLOCK)));
	public static final RegistryObject<Block> redstone_ore_stairs = BLOCKS.register("redstone_ore_stairs", () -> new RedstoneOreStairs(Blocks.REDSTONE_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.REDSTONE_ORE)));
	public static final RegistryObject<Block> ice_stairs = BLOCKS.register("ice_stairs", () -> new StairBlock(Blocks.ICE::defaultBlockState, BlockBehaviour.Properties.of(Material.ICE).friction(0.98F).strength(0.5F).sound(SoundType.GLASS).noOcclusion()));
	public static final RegistryObject<Block> snow_block_stairs = BLOCKS.register("snow_block_stairs", () -> new StairBlock(Blocks.SNOW_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
	public static final RegistryObject<Block> clay_stairs = BLOCKS.register("clay_stairs", () -> new StairBlock(Blocks.CLAY::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CLAY)));
	public static final RegistryObject<Block> pumpkin_stairs = BLOCKS.register("pumpkin_stairs", () -> new PumpkinStairs(Blocks.PUMPKIN::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PUMPKIN)));
	public static final RegistryObject<Block> netherrack_stairs = BLOCKS.register("netherrack_stairs", () -> new StairBlock(Blocks.NETHERRACK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
	public static final RegistryObject<Block> soul_sand_stairs = BLOCKS.register("soul_sand_stairs", () -> new StairBlock(Blocks.SOUL_SAND::defaultBlockState, BlockBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_BROWN).strength(0.5F).speedFactor(0.4F).sound(SoundType.SAND)));
	public static final RegistryObject<Block> soul_soil_stairs = BLOCKS.register("soul_soil_stairs", () -> new StairBlock(Blocks.SOUL_SOIL::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SOUL_SOIL)));
	public static final RegistryObject<Block> glowstone_stairs = BLOCKS.register("glowstone_stairs", () -> new StairBlock(Blocks.GLOWSTONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GLOWSTONE)));
	public static final RegistryObject<Block> carved_pumpkin_stairs = BLOCKS.register("carved_pumpkin_stairs", () -> new StairBlock(Blocks.CARVED_PUMPKIN::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CARVED_PUMPKIN)));
	public static final RegistryObject<Block> jack_o_lantern_stairs = BLOCKS.register("jack_o_lantern_stairs", () -> new StairBlock(Blocks.JACK_O_LANTERN::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.JACK_O_LANTERN)));
	public static final RegistryObject<Block> white_stained_glass_stairs = BLOCKS.register("white_stained_glass_stairs", () -> new StairBlock(Blocks.WHITE_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WHITE_STAINED_GLASS)/*.notSolid()*/));
	public static final RegistryObject<Block> orange_stained_glass_stairs = BLOCKS.register("orange_stained_glass_stairs", () -> new StairBlock(Blocks.ORANGE_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ORANGE_STAINED_GLASS)));
	public static final RegistryObject<Block> magenta_stained_glass_stairs = BLOCKS.register("magenta_stained_glass_stairs", () -> new StairBlock(Blocks.MAGENTA_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MAGENTA_STAINED_GLASS)));
	public static final RegistryObject<Block> light_blue_stained_glass_stairs = BLOCKS.register("light_blue_stained_glass_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> yellow_stained_glass_stairs = BLOCKS.register("yellow_stained_glass_stairs", () -> new StairBlock(Blocks.YELLOW_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.YELLOW_STAINED_GLASS)));
	public static final RegistryObject<Block> lime_stained_glass_stairs = BLOCKS.register("lime_stained_glass_stairs", () -> new StairBlock(Blocks.LIME_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIME_STAINED_GLASS)));
	public static final RegistryObject<Block> pink_stained_glass_stairs = BLOCKS.register("pink_stained_glass_stairs", () -> new StairBlock(Blocks.PINK_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PINK_STAINED_GLASS)));
	public static final RegistryObject<Block> gray_stained_glass_stairs = BLOCKS.register("gray_stained_glass_stairs", () -> new StairBlock(Blocks.GRAY_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> light_gray_stained_glass_stairs = BLOCKS.register("light_gray_stained_glass_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> cyan_stained_glass_stairs = BLOCKS.register("cyan_stained_glass_stairs", () -> new StairBlock(Blocks.CYAN_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CYAN_STAINED_GLASS)));
	public static final RegistryObject<Block> purple_stained_glass_stairs = BLOCKS.register("purple_stained_glass_stairs", () -> new StairBlock(Blocks.PURPLE_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PURPLE_STAINED_GLASS)));
	public static final RegistryObject<Block> blue_stained_glass_stairs = BLOCKS.register("blue_stained_glass_stairs", () -> new StairBlock(Blocks.BLUE_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> brown_stained_glass_stairs = BLOCKS.register("brown_stained_glass_stairs", () -> new StairBlock(Blocks.BROWN_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BROWN_STAINED_GLASS)));
	public static final RegistryObject<Block> green_stained_glass_stairs = BLOCKS.register("green_stained_glass_stairs", () -> new StairBlock(Blocks.GREEN_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GREEN_STAINED_GLASS)));
	public static final RegistryObject<Block> red_stained_glass_stairs = BLOCKS.register("red_stained_glass_stairs", () -> new StairBlock(Blocks.RED_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RED_STAINED_GLASS)));
	public static final RegistryObject<Block> black_stained_glass_stairs = BLOCKS.register("black_stained_glass_stairs", () -> new StairBlock(Blocks.BLACK_STAINED_GLASS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLACK_STAINED_GLASS)));
	public static final RegistryObject<Block> oak_trapdoor_stairs = BLOCKS.register("oak_trapdoor_stairs", () -> new StairBlock(Blocks.OAK_PLANKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.OAK_TRAPDOOR)));
	public static final RegistryObject<Block> spruce_trapdoor_stairs = BLOCKS.register("spruce_trapdoor_stairs", () -> new StairBlock(Blocks.SPRUCE_PLANKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SPRUCE_TRAPDOOR)));
	public static final RegistryObject<Block> birch_trapdoor_stairs = BLOCKS.register("birch_trapdoor_stairs", () -> new StairBlock(Blocks.BIRCH_PLANKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BIRCH_TRAPDOOR)));
	public static final RegistryObject<Block> jungle_trapdoor_stairs = BLOCKS.register("jungle_trapdoor_stairs", () -> new StairBlock(Blocks.JUNGLE_PLANKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.JUNGLE_TRAPDOOR)));
	public static final RegistryObject<Block> acacia_trapdoor_stairs = BLOCKS.register("acacia_trapdoor_stairs", () -> new StairBlock(Blocks.ACACIA_PLANKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ACACIA_TRAPDOOR)));
	public static final RegistryObject<Block> dark_oak_trapdoor_stairs = BLOCKS.register("dark_oak_trapdoor_stairs", () -> new StairBlock(Blocks.DARK_OAK_PLANKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DARK_OAK_TRAPDOOR)));
	public static final RegistryObject<Block> cracked_stone_brick_stairs = BLOCKS.register("cracked_stone_brick_stairs", () -> new StairBlock(Blocks.CRACKED_STONE_BRICKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRACKED_STONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_stone_brick_stairs = BLOCKS.register("chiseled_stone_brick_stairs", () -> new StairBlock(Blocks.CHISELED_STONE_BRICKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CHISELED_STONE_BRICKS)));
	public static final RegistryObject<Block> brown_mushroom_block_stairs = BLOCKS.register("brown_mushroom_block_stairs", () -> new StairBlock(Blocks.BROWN_MUSHROOM_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BROWN_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> red_mushroom_block_stairs = BLOCKS.register("red_mushroom_block_stairs", () -> new StairBlock(Blocks.RED_MUSHROOM_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RED_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> mushroom_stem_stairs = BLOCKS.register("mushroom_stem_stairs", () -> new StairBlock(Blocks.MUSHROOM_STEM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MUSHROOM_STEM)));
	public static final RegistryObject<Block> iron_bars_stairs = BLOCKS.register("iron_bars_stairs", () -> new StairBlock(Blocks.IRON_BARS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.IRON_BARS)));
	public static final RegistryObject<Block> melon_stairs = BLOCKS.register("melon_stairs", () -> new StairBlock(Blocks.MELON::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MELON)));
	public static final RegistryObject<Block> vine_stairs = BLOCKS.register("vine_stairs", () -> new StairBlock(Blocks.MELON::defaultBlockState, BlockBehaviour.Properties.of(Material.GRASS).noCollission().strength(0.2F).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> mycelium_stairs = BLOCKS.register("mycelium_stairs", () -> new MyceliumStairs(Blocks.MYCELIUM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MYCELIUM)));
	public static final RegistryObject<Block> end_stone_stairs = BLOCKS.register("end_stone_stairs", () -> new StairBlock(Blocks.END_STONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.END_STONE)));
	public static final RegistryObject<Block> dragon_egg_stairs = BLOCKS.register("dragon_egg_stairs", () -> new StairBlock(Blocks.DRAGON_EGG::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DRAGON_EGG)));
	public static final RegistryObject<Block> redstone_lamp_stairs = BLOCKS.register("redstone_lamp_stairs", () -> new RedstoneLampStairs(Blocks.REDSTONE_LAMP::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.REDSTONE_LAMP)));
	public static final RegistryObject<Block> emerald_ore_stairs = BLOCKS.register("emerald_ore_stairs", () -> new OreStairs(Blocks.EMERALD_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.EMERALD_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> emerald_block_stairs = BLOCKS.register("emerald_block_stairs", () -> new StairBlock(Blocks.EMERALD_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.EMERALD_BLOCK)));
	public static final RegistryObject<Block> redstone_block_stairs = BLOCKS.register("redstone_block_stairs", () -> new StairBlock(Blocks.REDSTONE_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.REDSTONE_BLOCK)));
	public static final RegistryObject<Block> nether_quartz_ore_stairs = BLOCKS.register("nether_quartz_ore_stairs", () -> new OreStairs(Blocks.NETHER_QUARTZ_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.NETHER_QUARTZ_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> hopper_stairs = BLOCKS.register("hopper_stairs", () -> new StairBlock(Blocks.IRON_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK)));
	public static final RegistryObject<Block> chiseled_quartz_block_stairs = BLOCKS.register("chiseled_quartz_block_stairs", () -> new StairBlock(Blocks.CHISELED_QUARTZ_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CHISELED_QUARTZ_BLOCK)));
	public static final RegistryObject<Block> quartz_pillar_stairs = BLOCKS.register("quartz_pillar_stairs", () -> new StairBlock(Blocks.QUARTZ_PILLAR::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.QUARTZ_PILLAR)));
	public static final RegistryObject<Block> white_terracotta_stairs = BLOCKS.register("white_terracotta_stairs", () -> new StairBlock(Blocks.WHITE_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
	public static final RegistryObject<Block> orange_terracotta_stairs = BLOCKS.register("orange_terracotta_stairs", () -> new StairBlock(Blocks.ORANGE_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_terracotta_stairs = BLOCKS.register("magenta_terracotta_stairs", () -> new StairBlock(Blocks.MAGENTA_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_terracotta_stairs = BLOCKS.register("light_blue_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_terracotta_stairs = BLOCKS.register("yellow_terracotta_stairs", () -> new StairBlock(Blocks.YELLOW_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
	public static final RegistryObject<Block> lime_terracotta_stairs = BLOCKS.register("lime_terracotta_stairs", () -> new StairBlock(Blocks.LIME_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
	public static final RegistryObject<Block> pink_terracotta_stairs = BLOCKS.register("pink_terracotta_stairs", () -> new StairBlock(Blocks.PINK_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
	public static final RegistryObject<Block> gray_terracotta_stairs = BLOCKS.register("gray_terracotta_stairs", () -> new StairBlock(Blocks.GRAY_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_terracotta_stairs = BLOCKS.register("light_gray_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_terracotta_stairs = BLOCKS.register("cyan_terracotta_stairs", () -> new StairBlock(Blocks.CYAN_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
	public static final RegistryObject<Block> purple_terracotta_stairs = BLOCKS.register("purple_terracotta_stairs", () -> new StairBlock(Blocks.PURPLE_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
	public static final RegistryObject<Block> blue_terracotta_stairs = BLOCKS.register("blue_terracotta_stairs", () -> new StairBlock(Blocks.BLUE_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> brown_terracotta_stairs = BLOCKS.register("brown_terracotta_stairs", () -> new StairBlock(Blocks.BROWN_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
	public static final RegistryObject<Block> green_terracotta_stairs = BLOCKS.register("green_terracotta_stairs", () -> new StairBlock(Blocks.GREEN_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
	public static final RegistryObject<Block> red_terracotta_stairs = BLOCKS.register("red_terracotta_stairs", () -> new StairBlock(Blocks.RED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
	public static final RegistryObject<Block> black_terracotta_stairs = BLOCKS.register("black_terracotta_stairs", () -> new StairBlock(Blocks.BLACK_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
	public static final RegistryObject<Block> slime_block_stairs = BLOCKS.register("slime_block_stairs", () -> new StairBlock(Blocks.SLIME_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SLIME_BLOCK)));
	public static final RegistryObject<Block> iron_trapdoor_stairs = BLOCKS.register("iron_trapdoor_stairs", () -> new StairBlock(Blocks.IRON_TRAPDOOR::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.IRON_TRAPDOOR)));
	public static final RegistryObject<Block> sea_lantern_stairs = BLOCKS.register("sea_lantern_stairs", () -> new StairBlock(Blocks.SEA_LANTERN::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SEA_LANTERN)));
	public static final RegistryObject<Block> hay_block_stairs = BLOCKS.register("hay_block_stairs", () -> new StairBlock(Blocks.HAY_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.HAY_BLOCK)));
	public static final RegistryObject<Block> terracotta_stairs = BLOCKS.register("terracotta_stairs", () -> new StairBlock(Blocks.TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
	public static final RegistryObject<Block> coal_block_stairs = BLOCKS.register("coal_block_stairs", () -> new StairBlock(Blocks.COAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.COAL_BLOCK)));
	public static final RegistryObject<Block> packed_ice_stairs = BLOCKS.register("packed_ice_stairs", () -> new StairBlock(Blocks.PACKED_ICE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)));
	public static final RegistryObject<Block> chiseled_red_sandstone_stairs = BLOCKS.register("chiseled_red_sandstone_stairs", () -> new StairBlock(Blocks.CHISELED_RED_SANDSTONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CHISELED_RED_SANDSTONE)));
	public static final RegistryObject<Block> cut_red_sandstone_stairs = BLOCKS.register("cut_red_sandstone_stairs", () -> new StairBlock(Blocks.CUT_RED_SANDSTONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CUT_RED_SANDSTONE)));
	public static final RegistryObject<Block> smooth_stone_stairs = BLOCKS.register("smooth_stone_stairs", () -> new StairBlock(Blocks.SMOOTH_STONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SMOOTH_STONE)));
	public static final RegistryObject<Block> purpur_pillar_stairs = BLOCKS.register("purpur_pillar_stairs", () -> new StairBlock(Blocks.PURPUR_PILLAR::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PURPUR_PILLAR)));
	public static final RegistryObject<Block> dirt_path_stairs = BLOCKS.register("dirt_path_stairs", () -> new DirtPathStairs(Blocks.DIRT_PATH::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DIRT_PATH)));
	public static final RegistryObject<Block> magma_block_stairs = BLOCKS.register("magma_block_stairs", () -> new StairBlock(Blocks.MAGMA_BLOCK::defaultBlockState, BlockBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).lightLevel((state) -> 3).strength(0.5F)));
	public static final RegistryObject<Block> nether_wart_block_stairs = BLOCKS.register("nether_wart_block_stairs", () -> new StairBlock(Blocks.NETHER_WART_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.NETHER_WART_BLOCK)));
	public static final RegistryObject<Block> bone_block_stairs = BLOCKS.register("bone_block_stairs", () -> new StairBlock(Blocks.BONE_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BONE_BLOCK)));
	public static final RegistryObject<Block> white_glazed_terracotta_stairs = BLOCKS.register("white_glazed_terracotta_stairs", () -> new StairBlock(Blocks.WHITE_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WHITE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> orange_glazed_terracotta_stairs = BLOCKS.register("orange_glazed_terracotta_stairs", () -> new StairBlock(Blocks.ORANGE_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ORANGE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_glazed_terracotta_stairs = BLOCKS.register("magenta_glazed_terracotta_stairs", () -> new StairBlock(Blocks.MAGENTA_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MAGENTA_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_glazed_terracotta_stairs = BLOCKS.register("light_blue_glazed_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_glazed_terracotta_stairs = BLOCKS.register("yellow_glazed_terracotta_stairs", () -> new StairBlock(Blocks.YELLOW_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.YELLOW_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> lime_glazed_terracotta_stairs = BLOCKS.register("lime_glazed_terracotta_stairs", () -> new StairBlock(Blocks.LIME_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIME_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> pink_glazed_terracotta_stairs = BLOCKS.register("pink_glazed_terracotta_stairs", () -> new StairBlock(Blocks.PINK_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PINK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> gray_glazed_terracotta_stairs = BLOCKS.register("gray_glazed_terracotta_stairs", () -> new StairBlock(Blocks.GRAY_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_glazed_terracotta_stairs = BLOCKS.register("light_gray_glazed_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_glazed_terracotta_stairs = BLOCKS.register("cyan_glazed_terracotta_stairs", () -> new StairBlock(Blocks.CYAN_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CYAN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> purple_glazed_terracotta_stairs = BLOCKS.register("purple_glazed_terracotta_stairs", () -> new StairBlock(Blocks.PURPLE_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PURPLE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> blue_glazed_terracotta_stairs = BLOCKS.register("blue_glazed_terracotta_stairs", () -> new StairBlock(Blocks.BLUE_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> brown_glazed_terracotta_stairs = BLOCKS.register("brown_glazed_terracotta_stairs", () -> new StairBlock(Blocks.BROWN_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BROWN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> green_glazed_terracotta_stairs = BLOCKS.register("green_glazed_terracotta_stairs", () -> new StairBlock(Blocks.GREEN_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GREEN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> red_glazed_terracotta_stairs = BLOCKS.register("red_glazed_terracotta_stairs", () -> new StairBlock(Blocks.RED_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RED_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> black_glazed_terracotta_stairs = BLOCKS.register("black_glazed_terracotta_stairs", () -> new StairBlock(Blocks.BLACK_GLAZED_TERRACOTTA::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLACK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> white_concrete_stairs = BLOCKS.register("white_concrete_stairs", () -> new StairBlock(Blocks.WHITE_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE)));
	public static final RegistryObject<Block> orange_concrete_stairs = BLOCKS.register("orange_concrete_stairs", () -> new StairBlock(Blocks.ORANGE_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE)));
	public static final RegistryObject<Block> magenta_concrete_stairs = BLOCKS.register("magenta_concrete_stairs", () -> new StairBlock(Blocks.MAGENTA_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE)));
	public static final RegistryObject<Block> light_blue_concrete_stairs = BLOCKS.register("light_blue_concrete_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE)));
	public static final RegistryObject<Block> yellow_concrete_stairs = BLOCKS.register("yellow_concrete_stairs", () -> new StairBlock(Blocks.YELLOW_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE)));
	public static final RegistryObject<Block> lime_concrete_stairs = BLOCKS.register("lime_concrete_stairs", () -> new StairBlock(Blocks.LIME_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE)));
	public static final RegistryObject<Block> pink_concrete_stairs = BLOCKS.register("pink_concrete_stairs", () -> new StairBlock(Blocks.PINK_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE)));
	public static final RegistryObject<Block> gray_concrete_stairs = BLOCKS.register("gray_concrete_stairs", () -> new StairBlock(Blocks.GRAY_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE)));
	public static final RegistryObject<Block> light_gray_concrete_stairs = BLOCKS.register("light_gray_concrete_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE)));
	public static final RegistryObject<Block> cyan_concrete_stairs = BLOCKS.register("cyan_concrete_stairs", () -> new StairBlock(Blocks.CYAN_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE)));
	public static final RegistryObject<Block> purple_concrete_stairs = BLOCKS.register("purple_concrete_stairs", () -> new StairBlock(Blocks.PURPLE_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE)));
	public static final RegistryObject<Block> blue_concrete_stairs = BLOCKS.register("blue_concrete_stairs", () -> new StairBlock(Blocks.BLUE_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE)));
	public static final RegistryObject<Block> brown_concrete_stairs = BLOCKS.register("brown_concrete_stairs", () -> new StairBlock(Blocks.BROWN_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE)));
	public static final RegistryObject<Block> green_concrete_stairs = BLOCKS.register("green_concrete_stairs", () -> new StairBlock(Blocks.GREEN_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE)));
	public static final RegistryObject<Block> red_concrete_stairs = BLOCKS.register("red_concrete_stairs", () -> new StairBlock(Blocks.RED_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE)));
	public static final RegistryObject<Block> black_concrete_stairs = BLOCKS.register("black_concrete_stairs", () -> new StairBlock(Blocks.BLACK_CONCRETE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE)));
	public static final RegistryObject<Block> white_concrete_powder_stairs = BLOCKS.register("white_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> orange_concrete_powder_stairs = BLOCKS.register("orange_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> magenta_concrete_powder_stairs = BLOCKS.register("magenta_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_blue_concrete_powder_stairs = BLOCKS.register("light_blue_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> yellow_concrete_powder_stairs = BLOCKS.register("yellow_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE_POWDER)));
	public static final RegistryObject<Block> lime_concrete_powder_stairs = BLOCKS.register("lime_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE_POWDER)));
	public static final RegistryObject<Block> pink_concrete_powder_stairs = BLOCKS.register("pink_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> gray_concrete_powder_stairs = BLOCKS.register("gray_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_gray_concrete_powder_stairs = BLOCKS.register("light_gray_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> cyan_concrete_powder_stairs = BLOCKS.register("cyan_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> purple_concrete_powder_stairs = BLOCKS.register("purple_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> blue_concrete_powder_stairs = BLOCKS.register("blue_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> brown_concrete_powder_stairs = BLOCKS.register("brown_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> green_concrete_powder_stairs = BLOCKS.register("green_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> red_concrete_powder_stairs = BLOCKS.register("red_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE_POWDER)));
	public static final RegistryObject<Block> black_concrete_powder_stairs = BLOCKS.register("black_concrete_powder_stairs", () -> new ConcretePowderStairs(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> dried_kelp_block_stairs = BLOCKS.register("dried_kelp_block_stairs", () -> new StairBlock(Blocks.DRIED_KELP_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DRIED_KELP_BLOCK)));
	public static final RegistryObject<Block> dead_tube_coral_block_stairs = BLOCKS.register("dead_tube_coral_block_stairs", () -> new StairBlock(Blocks.DEAD_TUBE_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEAD_TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_brain_coral_block_stairs = BLOCKS.register("dead_brain_coral_block_stairs", () -> new StairBlock(Blocks.DEAD_BRAIN_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEAD_BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_bubble_coral_block_stairs = BLOCKS.register("dead_bubble_coral_block_stairs", () -> new StairBlock(Blocks.DEAD_BUBBLE_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEAD_BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_fire_coral_block_stairs = BLOCKS.register("dead_fire_coral_block_stairs", () -> new StairBlock(Blocks.DEAD_FIRE_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEAD_FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_horn_coral_block_stairs = BLOCKS.register("dead_horn_coral_block_stairs", () -> new StairBlock(Blocks.DEAD_HORN_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEAD_HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> tube_coral_block_stairs = BLOCKS.register("tube_coral_block_stairs", () -> new StairBlock(Blocks.TUBE_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> brain_coral_block_stairs = BLOCKS.register("brain_coral_block_stairs", () -> new StairBlock(Blocks.BRAIN_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> bubble_coral_block_stairs = BLOCKS.register("bubble_coral_block_stairs", () -> new StairBlock(Blocks.BUBBLE_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> fire_coral_block_stairs = BLOCKS.register("fire_coral_block_stairs", () -> new StairBlock(Blocks.FIRE_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> horn_coral_block_stairs = BLOCKS.register("horn_coral_block_stairs", () -> new StairBlock(Blocks.HORN_CORAL_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> blue_ice_stairs = BLOCKS.register("blue_ice_stairs", () -> new StairBlock(Blocks.BLUE_ICE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BLUE_ICE)));
	public static final RegistryObject<Block> honey_block_stairs = BLOCKS.register("honey_block_stairs", () -> new StairBlock(Blocks.HONEY_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.HONEY_BLOCK)));
	public static final RegistryObject<Block> honeycomb_block_stairs = BLOCKS.register("honeycomb_block_stairs", () -> new StairBlock(Blocks.HONEYCOMB_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.HONEYCOMB_BLOCK)));
	public static final RegistryObject<Block> warped_stem_stairs = BLOCKS.register("warped_stem_stairs", () -> new LogStairs(Blocks.WARPED_STEM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WARPED_STEM)));
	public static final RegistryObject<Block> stripped_warped_stem_stairs = BLOCKS.register("stripped_warped_stem_stairs", () -> new StairBlock(Blocks.STRIPPED_WARPED_STEM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_STEM)));
	public static final RegistryObject<Block> warped_hyphae_stairs = BLOCKS.register("warped_hyphae_stairs", () -> new LogStairs(Blocks.WARPED_HYPHAE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WARPED_HYPHAE)));
	public static final RegistryObject<Block> stripped_warped_hyphae_stairs = BLOCKS.register("stripped_warped_hyphae_stairs", () -> new StairBlock(Blocks.STRIPPED_WARPED_HYPHAE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_HYPHAE)));
	public static final RegistryObject<Block> warped_nylium_stairs = BLOCKS.register("warped_nylium_stairs", () -> new StairBlock(Blocks.WARPED_NYLIUM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WARPED_NYLIUM)));
	public static final RegistryObject<Block> warped_wart_block_stairs = BLOCKS.register("warped_wart_block_stairs", () -> new StairBlock(Blocks.WARPED_WART_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WARPED_WART_BLOCK)));
	public static final RegistryObject<Block> crimson_stem_stairs = BLOCKS.register("crimson_stem_stairs", () -> new LogStairs(Blocks.CRIMSON_STEM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRIMSON_STEM)));
	public static final RegistryObject<Block> stripped_crimson_stem_stairs = BLOCKS.register("stripped_crimson_stem_stairs", () -> new StairBlock(Blocks.STRIPPED_CRIMSON_STEM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_STEM)));
	public static final RegistryObject<Block> crimson_hyphae_stairs = BLOCKS.register("crimson_hyphae_stairs", () -> new LogStairs(Blocks.CRIMSON_HYPHAE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> stripped_crimson_hyphae_stairs = BLOCKS.register("stripped_crimson_hyphae_stairs", () -> new StairBlock(Blocks.STRIPPED_CRIMSON_HYPHAE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> crimson_nylium_stairs = BLOCKS.register("crimson_nylium_stairs", () -> new StairBlock(Blocks.CRIMSON_NYLIUM::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRIMSON_NYLIUM)));
	public static final RegistryObject<Block> shroomlight_stairs = BLOCKS.register("shroomlight_stairs", () -> new StairBlock(Blocks.SHROOMLIGHT::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SHROOMLIGHT)));
	public static final RegistryObject<Block> netherite_block_stairs = BLOCKS.register("netherite_block_stairs", () -> new StairBlock(Blocks.NETHERITE_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.NETHERITE_BLOCK)));
	public static final RegistryObject<Block> ancient_debris_stairs = BLOCKS.register("ancient_debris_stairs", () -> new StairBlock(Blocks.ANCIENT_DEBRIS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ANCIENT_DEBRIS)));
	public static final RegistryObject<Block> crying_obsidian_stairs = BLOCKS.register("crying_obsidian_stairs", () -> new StairBlock(Blocks.CRYING_OBSIDIAN::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRYING_OBSIDIAN)));
	public static final RegistryObject<Block> basalt_stairs = BLOCKS.register("basalt_stairs", () -> new StairBlock(Blocks.BASALT::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BASALT)));
	public static final RegistryObject<Block> polished_basalt_stairs = BLOCKS.register("polished_basalt_stairs", () -> new StairBlock(Blocks.POLISHED_BASALT::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.POLISHED_BASALT)));
	public static final RegistryObject<Block> cracked_polished_blackstone_brick_stairs = BLOCKS.register("cracked_polished_blackstone_brick_stairs", () -> new StairBlock(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_polished_blackstone_stairs = BLOCKS.register("chiseled_polished_blackstone_stairs", () -> new StairBlock(Blocks.CHISELED_POLISHED_BLACKSTONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CHISELED_POLISHED_BLACKSTONE)));
	public static final RegistryObject<Block> gilded_blackstone_stairs = BLOCKS.register("gilded_blackstone_stairs", () -> new StairBlock(Blocks.GILDED_BLACKSTONE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GILDED_BLACKSTONE)));
	public static final RegistryObject<Block> chiseled_nether_brick_stairs = BLOCKS.register("chiseled_nether_brick_stairs", () -> new StairBlock(Blocks.CHISELED_NETHER_BRICKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CHISELED_NETHER_BRICKS)));
	public static final RegistryObject<Block> cracked_nether_brick_stairs = BLOCKS.register("cracked_nether_brick_stairs", () -> new StairBlock(Blocks.CRACKED_NETHER_BRICKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRACKED_NETHER_BRICKS)));
	public static final RegistryObject<Block> quartz_brick_stairs = BLOCKS.register("quartz_brick_stairs", () -> new StairBlock(Blocks.QUARTZ_BRICKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.QUARTZ_BRICKS)));
	public static final RegistryObject<Block> AMETHYST_BLOCK_STAIRS = BLOCKS.register("amethyst_block_stairs", () -> new StairBlock(Blocks.AMETHYST_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.AMETHYST_BLOCK)));
	public static final RegistryObject<Block> AZALEA_LEAVES_STAIRS = BLOCKS.register("azalea_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.AZALEA_LEAVES).noOcclusion().isSuffocating((state, getter, pos) -> false).isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> BUDDING_AMETHYST_STAIRS = BLOCKS.register("budding_amethyst_stairs", () -> new StairBlock(Blocks.BUDDING_AMETHYST::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.BUDDING_AMETHYST)));
	public static final RegistryObject<Block> CALCITE_STAIRS = BLOCKS.register("calcite_stairs", () -> new StairBlock(Blocks.CALCITE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CALCITE)));
	public static final RegistryObject<Block> CHISELED_DEEPSLATE_STAIRS = BLOCKS.register("chiseled_deepslate_stairs", () -> new StairBlock(Blocks.CHISELED_DEEPSLATE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CHISELED_DEEPSLATE)));
	public static final RegistryObject<Block> COPPER_BLOCK_STAIRS = BLOCKS.register("copper_block_stairs", () -> new StairBlock(Blocks.COPPER_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.COPPER_BLOCK)));
	public static final RegistryObject<Block> COPPER_ORE_STAIRS = BLOCKS.register("copper_ore_stairs", () -> new StairBlock(Blocks.COPPER_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.COPPER_ORE)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_BRICK_STAIRS = BLOCKS.register("cracked_deepslate_brick_stairs", () -> new StairBlock(Blocks.CRACKED_DEEPSLATE_BRICKS::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_BRICKS)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_TILE_STAIRS = BLOCKS.register("cracked_deepslate_tile_stairs", () -> new StairBlock(Blocks.CRACKED_DEEPSLATE_TILES::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_TILES)));
	public static final RegistryObject<Block> DEEPSLATE_COAL_ORE_STAIRS = BLOCKS.register("deepslate_coal_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_COAL_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COAL_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_COPPER_ORE_STAIRS = BLOCKS.register("deepslate_copper_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_COPPER_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COPPER_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_DIAMOND_ORE_STAIRS = BLOCKS.register("deepslate_diamond_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_DIAMOND_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_DIAMOND_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_EMERALD_ORE_STAIRS = BLOCKS.register("deepslate_emerald_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_EMERALD_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_EMERALD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_GOLD_ORE_STAIRS = BLOCKS.register("deepslate_gold_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_GOLD_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_GOLD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_IRON_ORE_STAIRS = BLOCKS.register("deepslate_iron_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_IRON_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_IRON_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_LAPIS_ORE_STAIRS = BLOCKS.register("deepslate_lapis_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_LAPIS_ORE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_LAPIS_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_REDSTONE_ORE_STAIRS = BLOCKS.register("deepslate_redstone_ore_stairs", () -> new StairBlock(Blocks.DEEPSLATE_REDSTONE_ORE::defaultBlockState, BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().lightLevel(/*litBlockEmission(9)*/ state -> 9).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
	public static final RegistryObject<Block> DEEPSLATE_STAIRS = BLOCKS.register("deepslate_stairs", () -> new StairBlock(Blocks.DEEPSLATE::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DEEPSLATE)));
	public static final RegistryObject<Block> DRIPSTONE_BLOCK_STAIRS = BLOCKS.register("dripstone_block_stairs", () -> new StairBlock(Blocks.DRIPSTONE_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.DRIPSTONE_BLOCK)));
	public static final RegistryObject<Block> EXPOSED_COPPER_STAIRS = BLOCKS.register("exposed_copper_stairs", () -> new StairBlock(Blocks.EXPOSED_COPPER::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.EXPOSED_COPPER)));
	public static final RegistryObject<Block> FLOWERING_AZALEA_LEAVES_STAIRS = BLOCKS.register("flowering_azalea_leaves_stairs", () -> new StairBlock(Blocks.STONE::defaultBlockState, BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.AZALEA_LEAVES).noOcclusion().isSuffocating((state, getter, pos) -> false).isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> GLOW_LICHEN_STAIRS = BLOCKS.register("glow_lichen_stairs", () -> new StairBlock(Blocks.GLOW_LICHEN::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.GLOW_LICHEN)));
	public static final RegistryObject<Block> MOSS_BLOCK_STAIRS = BLOCKS.register("moss_block_stairs", () -> new StairBlock(Blocks.MOSS_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.MOSS_BLOCK)));
	public static final RegistryObject<Block> OXIDIZED_COPPER_STAIRS = BLOCKS.register("oxidized_copper_stairs", () -> new StairBlock(Blocks.OXIDIZED_COPPER::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.OXIDIZED_COPPER)));
	public static final RegistryObject<Block> RAW_COPPER_BLOCK_STAIRS = BLOCKS.register("raw_copper_block_stairs", () -> new StairBlock(Blocks.RAW_COPPER_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RAW_COPPER_BLOCK)));
	public static final RegistryObject<Block> RAW_GOLD_BLOCK_STAIRS = BLOCKS.register("raw_gold_block_stairs", () -> new StairBlock(Blocks.RAW_GOLD_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RAW_GOLD_BLOCK)));
	public static final RegistryObject<Block> RAW_IRON_BLOCK_STAIRS = BLOCKS.register("raw_iron_block_stairs", () -> new StairBlock(Blocks.RAW_IRON_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.RAW_IRON_BLOCK)));
	public static final RegistryObject<Block> ROOTED_DIRT_STAIRS = BLOCKS.register("rooted_dirt_stairs", () -> new FlattenableStairs(Blocks.ROOTED_DIRT::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.ROOTED_DIRT)));
	public static final RegistryObject<Block> SMOOTH_BASALT_STAIRS = BLOCKS.register("smooth_basalt_stairs", () -> new StairBlock(Blocks.SMOOTH_BASALT::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.SMOOTH_BASALT)));
	public static final RegistryObject<Block> TUFF_STAIRS = BLOCKS.register("tuff_stairs", () -> new StairBlock(Blocks.TUFF::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.TUFF)));
	public static final RegistryObject<Block> WAXED_COPPER_BLOCK_STAIRS = BLOCKS.register("waxed_copper_block_stairs", () -> new StairBlock(Blocks.WAXED_COPPER_BLOCK::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WAXED_COPPER_BLOCK)));
	public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_STAIRS = BLOCKS.register("waxed_exposed_copper_stairs", () -> new StairBlock(Blocks.WAXED_EXPOSED_COPPER::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_STAIRS = BLOCKS.register("waxed_oxidized_copper_stairs", () -> new StairBlock(Blocks.WAXED_OXIDIZED_COPPER::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_STAIRS = BLOCKS.register("waxed_weathered_copper_stairs", () -> new StairBlock(Blocks.WAXED_WEATHERED_COPPER::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_COPPER)));
	public static final RegistryObject<Block> WEATHERED_COPPER_STAIRS = BLOCKS.register("weathered_copper_stairs", () -> new StairBlock(Blocks.WEATHERED_COPPER::defaultBlockState, BlockBehaviour.Properties.copy(Blocks.WEATHERED_COPPER)));

	public static final RegistryObject<Block> stone_trapdoor = BLOCKS.register("stone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.STONE)));
	public static final RegistryObject<Block> granite_trapdoor = BLOCKS.register("granite_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GRANITE)));
	public static final RegistryObject<Block> polished_granite_trapdoor = BLOCKS.register("polished_granite_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_GRANITE)));
	public static final RegistryObject<Block> diorite_trapdoor = BLOCKS.register("diorite_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DIORITE)));
	public static final RegistryObject<Block> polished_diorite_trapdoor = BLOCKS.register("polished_diorite_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_DIORITE)));
	public static final RegistryObject<Block> andesite_trapdoor = BLOCKS.register("andesite_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ANDESITE)));
	public static final RegistryObject<Block> polished_andesite_trapdoor = BLOCKS.register("polished_andesite_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_ANDESITE)));
	public static final RegistryObject<Block> grass_block_trapdoor = BLOCKS.register("grass_block_trapdoor", () -> new GrassBlockTrapdoor(BlockBehaviour.Properties.copy(Blocks.GRASS_BLOCK)));
	public static final RegistryObject<Block> dirt_trapdoor = BLOCKS.register("dirt_trapdoor", () -> new FlattenableTrapdoor(BlockBehaviour.Properties.copy(Blocks.DIRT)));
	public static final RegistryObject<Block> coarse_dirt_trapdoor = BLOCKS.register("coarse_dirt_trapdoor", () -> new CoarseDirtTrapdoor(BlockBehaviour.Properties.copy(Blocks.COARSE_DIRT)));
	public static final RegistryObject<Block> podzol_trapdoor = BLOCKS.register("podzol_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PODZOL)));
	public static final RegistryObject<Block> cobblestone_trapdoor = BLOCKS.register("cobblestone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.COBBLESTONE)));
	public static final RegistryObject<Block> bedrock_trapdoor = BLOCKS.register("bedrock_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BEDROCK)));
	public static final RegistryObject<Block> sand_trapdoor = BLOCKS.register("sand_trapdoor", () -> new FallingTrapdoor(BlockBehaviour.Properties.copy(Blocks.SAND)));
	public static final RegistryObject<Block> red_sand_trapdoor = BLOCKS.register("red_sand_trapdoor", () -> new FallingTrapdoor(BlockBehaviour.Properties.copy(Blocks.RED_SAND)));
	public static final RegistryObject<Block> gravel_trapdoor = BLOCKS.register("gravel_trapdoor", () -> new FallingTrapdoor(BlockBehaviour.Properties.copy(Blocks.GRAVEL)));
	public static final RegistryObject<Block> gold_ore_trapdoor = BLOCKS.register("gold_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.GOLD_ORE)));
	public static final RegistryObject<Block> iron_ore_trapdoor = BLOCKS.register("iron_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.IRON_ORE)));
	public static final RegistryObject<Block> coal_ore_trapdoor = BLOCKS.register("coal_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.COAL_ORE), UniformInt.of(0, 2)));
	public static final RegistryObject<Block> nether_gold_ore_trapdoor = BLOCKS.register("nether_gold_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.NETHER_GOLD_ORE), UniformInt.of(0, 1)));
	public static final RegistryObject<Block> oak_log_trapdoor = BLOCKS.register("oak_log_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD)));
	public static final RegistryObject<Block> spruce_log_trapdoor = BLOCKS.register("spruce_log_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL)));
	public static final RegistryObject<Block> birch_log_trapdoor = BLOCKS.register("birch_log_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND)));
	public static final RegistryObject<Block> jungle_log_trapdoor = BLOCKS.register("jungle_log_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT)));
	public static final RegistryObject<Block> acacia_log_trapdoor = BLOCKS.register("acacia_log_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE)));
	public static final RegistryObject<Block> dark_oak_log_trapdoor = BLOCKS.register("dark_oak_log_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN)));
	public static final RegistryObject<Block> stripped_oak_log_trapdoor = BLOCKS.register("stripped_oak_log_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_log_trapdoor = BLOCKS.register("stripped_spruce_log_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL)));
	public static final RegistryObject<Block> stripped_birch_log_trapdoor = BLOCKS.register("stripped_birch_log_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND)));
	public static final RegistryObject<Block> stripped_jungle_log_trapdoor = BLOCKS.register("stripped_jungle_log_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT)));
	public static final RegistryObject<Block> stripped_acacia_log_trapdoor = BLOCKS.register("stripped_acacia_log_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE)));
	public static final RegistryObject<Block> stripped_dark_oak_log_trapdoor = BLOCKS.register("stripped_dark_oak_log_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN)));
	public static final RegistryObject<Block> oak_wood_trapdoor = BLOCKS.register("oak_wood_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD)));
	public static final RegistryObject<Block> spruce_wood_trapdoor = BLOCKS.register("spruce_wood_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL)));
	public static final RegistryObject<Block> birch_wood_trapdoor = BLOCKS.register("birch_wood_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND)));
	public static final RegistryObject<Block> jungle_wood_trapdoor = BLOCKS.register("jungle_wood_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT)));
	public static final RegistryObject<Block> acacia_wood_trapdoor = BLOCKS.register("acacia_wood_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY)));
	public static final RegistryObject<Block> dark_oak_wood_trapdoor = BLOCKS.register("dark_oak_wood_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN)));
	public static final RegistryObject<Block> stripped_oak_wood_trapdoor = BLOCKS.register("stripped_oak_wood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_wood_trapdoor = BLOCKS.register("stripped_spruce_wood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL)));
	public static final RegistryObject<Block> stripped_birch_wood_trapdoor = BLOCKS.register("stripped_birch_wood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND)));
	public static final RegistryObject<Block> stripped_jungle_wood_trapdoor = BLOCKS.register("stripped_jungle_wood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT)));
	public static final RegistryObject<Block> stripped_acacia_wood_trapdoor = BLOCKS.register("stripped_acacia_wood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE)));
	public static final RegistryObject<Block> stripped_dark_oak_wood_trapdoor = BLOCKS.register("stripped_dark_oak_wood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN)));
	public static final RegistryObject<Block> oak_leaves_trapdoor = BLOCKS.register("oak_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> spruce_leaves_trapdoor = BLOCKS.register("spruce_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> birch_leaves_trapdoor = BLOCKS.register("birch_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> jungle_leaves_trapdoor = BLOCKS.register("jungle_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> acacia_leaves_trapdoor = BLOCKS.register("acacia_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> dark_oak_leaves_trapdoor = BLOCKS.register("dark_oak_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2f).sound(SoundType.GRASS).noOcclusion().isViewBlocking((state, reader, pos) -> false)));
	public static final RegistryObject<Block> sponge_trapdoor = BLOCKS.register("sponge_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SPONGE)));
	public static final RegistryObject<Block> wet_sponge_trapdoor = BLOCKS.register("wet_sponge_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WET_SPONGE)));
	public static final RegistryObject<Block> glass_trapdoor = BLOCKS.register("glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GLASS)));
	public static final RegistryObject<Block> lapis_ore_trapdoor = BLOCKS.register("lapis_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.LAPIS_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> lapis_block_trapdoor = BLOCKS.register("lapis_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LAPIS_BLOCK)));
	public static final RegistryObject<Block> sandstone_trapdoor = BLOCKS.register("sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SANDSTONE)));
	public static final RegistryObject<Block> chiseled_sandstone_trapdoor = BLOCKS.register("chiseled_sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_SANDSTONE)));
	public static final RegistryObject<Block> cut_sandstone_trapdoor = BLOCKS.register("cut_sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CUT_SANDSTONE)));
	public static final RegistryObject<Block> white_wool_trapdoor = BLOCKS.register("white_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_WOOL)));
	public static final RegistryObject<Block> orange_wool_trapdoor = BLOCKS.register("orange_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_WOOL)));
	public static final RegistryObject<Block> magenta_wool_trapdoor = BLOCKS.register("magenta_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_WOOL)));
	public static final RegistryObject<Block> light_blue_wool_trapdoor = BLOCKS.register("light_blue_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_WOOL)));
	public static final RegistryObject<Block> yellow_wool_trapdoor = BLOCKS.register("yellow_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_WOOL)));
	public static final RegistryObject<Block> lime_wool_trapdoor = BLOCKS.register("lime_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIME_WOOL)));
	public static final RegistryObject<Block> pink_wool_trapdoor = BLOCKS.register("pink_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PINK_WOOL)));
	public static final RegistryObject<Block> gray_wool_trapdoor = BLOCKS.register("gray_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_WOOL)));
	public static final RegistryObject<Block> light_gray_wool_trapdoor = BLOCKS.register("light_gray_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL)));
	public static final RegistryObject<Block> cyan_wool_trapdoor = BLOCKS.register("cyan_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_WOOL)));
	public static final RegistryObject<Block> purple_wool_trapdoor = BLOCKS.register("purple_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_WOOL)));
	public static final RegistryObject<Block> blue_wool_trapdoor = BLOCKS.register("blue_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_WOOL)));
	public static final RegistryObject<Block> brown_wool_trapdoor = BLOCKS.register("brown_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_WOOL)));
	public static final RegistryObject<Block> green_wool_trapdoor = BLOCKS.register("green_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_WOOL)));
	public static final RegistryObject<Block> red_wool_trapdoor = BLOCKS.register("red_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_WOOL)));
	public static final RegistryObject<Block> black_wool_trapdoor = BLOCKS.register("black_wool_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_WOOL)));
	public static final RegistryObject<Block> gold_block_trapdoor = BLOCKS.register("gold_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GOLD_BLOCK)));
	public static final RegistryObject<Block> brick_trapdoor = BLOCKS.register("brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BRICKS)));
	public static final RegistryObject<Block> tnt_trapdoor = BLOCKS.register("tnt_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.TNT)));
	public static final RegistryObject<Block> bookshelf_trapdoor = BLOCKS.register("bookshelf_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BOOKSHELF)));
	public static final RegistryObject<Block> mossy_cobblestone_trapdoor = BLOCKS.register("mossy_cobblestone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MOSSY_COBBLESTONE)));
	public static final RegistryObject<Block> obsidian_trapdoor = BLOCKS.register("obsidian_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
	public static final RegistryObject<Block> spawner_trapdoor = BLOCKS.register("spawner_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SPAWNER)));
	public static final RegistryObject<Block> diamond_ore_trapdoor = BLOCKS.register("diamond_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.DIAMOND_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> diamond_block_trapdoor = BLOCKS.register("diamond_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DIAMOND_BLOCK)));
	public static final RegistryObject<Block> redstone_ore_trapdoor = BLOCKS.register("redstone_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.of(Material.STONE).lightLevel((state) -> 4).strength(3.0F, 3.0F), UniformInt.of(1, 5)));
	public static final RegistryObject<Block> ice_trapdoor = BLOCKS.register("ice_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.ICE).friction(0.98F).strength(0.5F).sound(SoundType.GLASS).noOcclusion()));
	public static final RegistryObject<Block> snow_block_trapdoor = BLOCKS.register("snow_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
	public static final RegistryObject<Block> clay_trapdoor = BLOCKS.register("clay_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CLAY)));
	public static final RegistryObject<Block> pumpkin_trapdoor = BLOCKS.register("pumpkin_trapdoor", () -> new PumpkinTrapdoor(BlockBehaviour.Properties.copy(Blocks.PUMPKIN)));
	public static final RegistryObject<Block> netherrack_trapdoor = BLOCKS.register("netherrack_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
	public static final RegistryObject<Block> soul_sand_trapdoor = BLOCKS.register("soul_sand_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_BROWN).strength(0.5F).speedFactor(0.4F).sound(SoundType.SAND)));
	public static final RegistryObject<Block> soul_soil_trapdoor = BLOCKS.register("soul_soil_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_SOIL)));
	public static final RegistryObject<Block> basalt_trapdoor = BLOCKS.register("basalt_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BASALT)));
	public static final RegistryObject<Block> polished_basalt_trapdoor = BLOCKS.register("polished_basalt_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BASALT)));
	public static final RegistryObject<Block> glowstone_trapdoor = BLOCKS.register("glowstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GLOWSTONE)));
	public static final RegistryObject<Block> carved_pumpkin_trapdoor = BLOCKS.register("carved_pumpkin_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CARVED_PUMPKIN)));
	public static final RegistryObject<Block> jack_o_lantern_trapdoor = BLOCKS.register("jack_o_lantern_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.JACK_O_LANTERN)));
	public static final RegistryObject<Block> white_stained_glass_trapdoor = BLOCKS.register("white_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_STAINED_GLASS)));
	public static final RegistryObject<Block> orange_stained_glass_trapdoor = BLOCKS.register("orange_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_STAINED_GLASS)));
	public static final RegistryObject<Block> magenta_stained_glass_trapdoor = BLOCKS.register("magenta_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_STAINED_GLASS)));
	public static final RegistryObject<Block> light_blue_stained_glass_trapdoor = BLOCKS.register("light_blue_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> yellow_stained_glass_trapdoor = BLOCKS.register("yellow_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_STAINED_GLASS)));
	public static final RegistryObject<Block> lime_stained_glass_trapdoor = BLOCKS.register("lime_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIME_STAINED_GLASS)));
	public static final RegistryObject<Block> pink_stained_glass_trapdoor = BLOCKS.register("pink_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PINK_STAINED_GLASS)));
	public static final RegistryObject<Block> gray_stained_glass_trapdoor = BLOCKS.register("gray_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> light_gray_stained_glass_trapdoor = BLOCKS.register("light_gray_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> cyan_stained_glass_trapdoor = BLOCKS.register("cyan_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_STAINED_GLASS)));
	public static final RegistryObject<Block> purple_stained_glass_trapdoor = BLOCKS.register("purple_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_STAINED_GLASS)));
	public static final RegistryObject<Block> blue_stained_glass_trapdoor = BLOCKS.register("blue_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> brown_stained_glass_trapdoor = BLOCKS.register("brown_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_STAINED_GLASS)));
	public static final RegistryObject<Block> green_stained_glass_trapdoor = BLOCKS.register("green_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_STAINED_GLASS)));
	public static final RegistryObject<Block> red_stained_glass_trapdoor = BLOCKS.register("red_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_STAINED_GLASS)));
	public static final RegistryObject<Block> black_stained_glass_trapdoor = BLOCKS.register("black_stained_glass_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_STAINED_GLASS)));
	public static final RegistryObject<Block> stone_brick_trapdoor = BLOCKS.register("stone_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.STONE_BRICKS)));
	public static final RegistryObject<Block> mossy_stone_brick_trapdoor = BLOCKS.register("mossy_stone_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MOSSY_STONE_BRICKS)));
	public static final RegistryObject<Block> cracked_stone_brick_trapdoor = BLOCKS.register("cracked_stone_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_STONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_stone_brick_trapdoor = BLOCKS.register("chiseled_stone_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_STONE_BRICKS)));
	public static final RegistryObject<Block> brown_mushroom_block_trapdoor = BLOCKS.register("brown_mushroom_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> red_mushroom_block_trapdoor = BLOCKS.register("red_mushroom_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> mushroom_stem_trapdoor = BLOCKS.register("mushroom_stem_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MUSHROOM_STEM)));
	public static final RegistryObject<Block> iron_bars_trapdoor = BLOCKS.register("iron_bars_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BARS)));
	public static final RegistryObject<Block> melon_trapdoor = BLOCKS.register("melon_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MELON)));
	public static final RegistryObject<Block> vine_trapdoor = BLOCKS.register("vine_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().strength(0.2F).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> mycelium_trapdoor = BLOCKS.register("mycelium_trapdoor", () -> new MyceliumTrapdoor(BlockBehaviour.Properties.copy(Blocks.MYCELIUM)));
	public static final RegistryObject<Block> nether_brick_trapdoor = BLOCKS.register("nether_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_BRICKS)));
	public static final RegistryObject<Block> end_stone_trapdoor = BLOCKS.register("end_stone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.END_STONE)));
	public static final RegistryObject<Block> dragon_egg_trapdoor = BLOCKS.register("dragon_egg_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DRAGON_EGG)));
	public static final RegistryObject<Block> redstone_lamp_trapdoor = BLOCKS.register("redstone_lamp_trapdoor", () -> new RedstoneLampTrapdoor(BlockBehaviour.Properties.copy(Blocks.REDSTONE_LAMP)));
	public static final RegistryObject<Block> emerald_ore_trapdoor = BLOCKS.register("emerald_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.EMERALD_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> emerald_block_trapdoor = BLOCKS.register("emerald_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.EMERALD_BLOCK)));
	public static final RegistryObject<Block> redstone_block_trapdoor = BLOCKS.register("redstone_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.REDSTONE_BLOCK)));
	public static final RegistryObject<Block> nether_quartz_ore_trapdoor = BLOCKS.register("nether_quartz_ore_trapdoor", () -> new OreTrapdoor(BlockBehaviour.Properties.copy(Blocks.NETHER_QUARTZ_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> hopper_trapdoor = BLOCKS.register("hopper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.HOPPER)));
	public static final RegistryObject<Block> quartz_block_trapdoor = BLOCKS.register("quartz_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_BLOCK)));
	public static final RegistryObject<Block> chiseled_quartz_block_trapdoor = BLOCKS.register("chiseled_quartz_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_QUARTZ_BLOCK)));
	public static final RegistryObject<Block> quartz_pillar_trapdoor = BLOCKS.register("quartz_pillar_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_PILLAR)));
	public static final RegistryObject<Block> white_terracotta_trapdoor = BLOCKS.register("white_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
	public static final RegistryObject<Block> orange_terracotta_trapdoor = BLOCKS.register("orange_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_terracotta_trapdoor = BLOCKS.register("magenta_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_terracotta_trapdoor = BLOCKS.register("light_blue_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_terracotta_trapdoor = BLOCKS.register("yellow_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
	public static final RegistryObject<Block> lime_terracotta_trapdoor = BLOCKS.register("lime_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
	public static final RegistryObject<Block> pink_terracotta_trapdoor = BLOCKS.register("pink_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
	public static final RegistryObject<Block> gray_terracotta_trapdoor = BLOCKS.register("gray_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_terracotta_trapdoor = BLOCKS.register("light_gray_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_terracotta_trapdoor = BLOCKS.register("cyan_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
	public static final RegistryObject<Block> purple_terracotta_trapdoor = BLOCKS.register("purple_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
	public static final RegistryObject<Block> blue_terracotta_trapdoor = BLOCKS.register("blue_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> brown_terracotta_trapdoor = BLOCKS.register("brown_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
	public static final RegistryObject<Block> green_terracotta_trapdoor = BLOCKS.register("green_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
	public static final RegistryObject<Block> red_terracotta_trapdoor = BLOCKS.register("red_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
	public static final RegistryObject<Block> black_terracotta_trapdoor = BLOCKS.register("black_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
	public static final RegistryObject<Block> slime_block_trapdoor = BLOCKS.register("slime_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SLIME_BLOCK)));
	public static final RegistryObject<Block> prismarine_trapdoor = BLOCKS.register("prismarine_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
	public static final RegistryObject<Block> prismarine_brick_trapdoor = BLOCKS.register("prismarine_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PRISMARINE_BRICKS)));
	public static final RegistryObject<Block> dark_prismarine_trapdoor = BLOCKS.register("dark_prismarine_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
	public static final RegistryObject<Block> sea_lantern_trapdoor = BLOCKS.register("sea_lantern_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SEA_LANTERN)));
	public static final RegistryObject<Block> hay_block_trapdoor = BLOCKS.register("hay_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.HAY_BLOCK)));
	public static final RegistryObject<Block> terracotta_trapdoor = BLOCKS.register("terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
	public static final RegistryObject<Block> coal_block_trapdoor = BLOCKS.register("coal_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.COAL_BLOCK)));
	public static final RegistryObject<Block> packed_ice_trapdoor = BLOCKS.register("packed_ice_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)));
	public static final RegistryObject<Block> red_sandstone_trapdoor = BLOCKS.register("red_sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_SANDSTONE)));
	public static final RegistryObject<Block> chiseled_red_sandstone_trapdoor = BLOCKS.register("chiseled_red_sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_RED_SANDSTONE)));
	public static final RegistryObject<Block> cut_red_sandstone_trapdoor = BLOCKS.register("cut_red_sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CUT_RED_SANDSTONE)));
	public static final RegistryObject<Block> smooth_stone_trapdoor = BLOCKS.register("smooth_stone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_STONE)));
	public static final RegistryObject<Block> smooth_sandstone_trapdoor = BLOCKS.register("smooth_sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_SANDSTONE)));
	public static final RegistryObject<Block> smooth_quartz_trapdoor = BLOCKS.register("smooth_quartz_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_QUARTZ)));
	public static final RegistryObject<Block> smooth_red_sandstone_trapdoor = BLOCKS.register("smooth_red_sandstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_RED_SANDSTONE)));
	public static final RegistryObject<Block> purpur_block_trapdoor = BLOCKS.register("purpur_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PURPUR_BLOCK)));
	public static final RegistryObject<Block> purpur_pillar_trapdoor = BLOCKS.register("purpur_pillar_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PURPUR_PILLAR)));
	public static final RegistryObject<Block> end_stone_brick_trapdoor = BLOCKS.register("end_stone_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.END_STONE_BRICKS)));
	public static final RegistryObject<Block> dirt_path_trapdoor = BLOCKS.register("dirt_path_trapdoor", () -> new DirtPathTrapdoor(BlockBehaviour.Properties.copy(Blocks.DIRT_PATH)));
	public static final RegistryObject<Block> magma_block_trapdoor = BLOCKS.register("magma_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).lightLevel((state) -> 3).strength(0.5F)));
	public static final RegistryObject<Block> nether_wart_block_trapdoor = BLOCKS.register("nether_wart_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_WART_BLOCK)));
	public static final RegistryObject<Block> red_nether_brick_trapdoor = BLOCKS.register("red_nether_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
	public static final RegistryObject<Block> bone_block_trapdoor = BLOCKS.register("bone_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BONE_BLOCK)));
	public static final RegistryObject<Block> white_glazed_terracotta_trapdoor = BLOCKS.register("white_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> orange_glazed_terracotta_trapdoor = BLOCKS.register("orange_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_glazed_terracotta_trapdoor = BLOCKS.register("magenta_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_glazed_terracotta_trapdoor = BLOCKS.register("light_blue_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_glazed_terracotta_trapdoor = BLOCKS.register("yellow_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> lime_glazed_terracotta_trapdoor = BLOCKS.register("lime_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIME_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> pink_glazed_terracotta_trapdoor = BLOCKS.register("pink_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PINK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> gray_glazed_terracotta_trapdoor = BLOCKS.register("gray_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_glazed_terracotta_trapdoor = BLOCKS.register("light_gray_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_glazed_terracotta_trapdoor = BLOCKS.register("cyan_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> purple_glazed_terracotta_trapdoor = BLOCKS.register("purple_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> blue_glazed_terracotta_trapdoor = BLOCKS.register("blue_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> brown_glazed_terracotta_trapdoor = BLOCKS.register("brown_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> green_glazed_terracotta_trapdoor = BLOCKS.register("green_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> red_glazed_terracotta_trapdoor = BLOCKS.register("red_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> black_glazed_terracotta_trapdoor = BLOCKS.register("black_glazed_terracotta_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> white_concrete_trapdoor = BLOCKS.register("white_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE)));
	public static final RegistryObject<Block> orange_concrete_trapdoor = BLOCKS.register("orange_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE)));
	public static final RegistryObject<Block> magenta_concrete_trapdoor = BLOCKS.register("magenta_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE)));
	public static final RegistryObject<Block> light_blue_concrete_trapdoor = BLOCKS.register("light_blue_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE)));
	public static final RegistryObject<Block> yellow_concrete_trapdoor = BLOCKS.register("yellow_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE)));
	public static final RegistryObject<Block> lime_concrete_trapdoor = BLOCKS.register("lime_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE)));
	public static final RegistryObject<Block> pink_concrete_trapdoor = BLOCKS.register("pink_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE)));
	public static final RegistryObject<Block> gray_concrete_trapdoor = BLOCKS.register("gray_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE)));
	public static final RegistryObject<Block> light_gray_concrete_trapdoor = BLOCKS.register("light_gray_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE)));
	public static final RegistryObject<Block> cyan_concrete_trapdoor = BLOCKS.register("cyan_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE)));
	public static final RegistryObject<Block> purple_concrete_trapdoor = BLOCKS.register("purple_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE)));
	public static final RegistryObject<Block> blue_concrete_trapdoor = BLOCKS.register("blue_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE)));
	public static final RegistryObject<Block> brown_concrete_trapdoor = BLOCKS.register("brown_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE)));
	public static final RegistryObject<Block> green_concrete_trapdoor = BLOCKS.register("green_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE)));
	public static final RegistryObject<Block> red_concrete_trapdoor = BLOCKS.register("red_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE)));
	public static final RegistryObject<Block> black_concrete_trapdoor = BLOCKS.register("black_concrete_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE)));
	public static final RegistryObject<Block> white_concrete_powder_trapdoor = BLOCKS.register("white_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> orange_concrete_powder_trapdoor = BLOCKS.register("orange_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> magenta_concrete_powder_trapdoor = BLOCKS.register("magenta_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_blue_concrete_powder_trapdoor = BLOCKS.register("light_blue_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> yellow_concrete_powder_trapdoor = BLOCKS.register("yellow_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE_POWDER)));
	public static final RegistryObject<Block> lime_concrete_powder_trapdoor = BLOCKS.register("lime_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE_POWDER)));
	public static final RegistryObject<Block> pink_concrete_powder_trapdoor = BLOCKS.register("pink_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> gray_concrete_powder_trapdoor = BLOCKS.register("gray_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_gray_concrete_powder_trapdoor = BLOCKS.register("light_gray_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> cyan_concrete_powder_trapdoor = BLOCKS.register("cyan_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> purple_concrete_powder_trapdoor = BLOCKS.register("purple_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> blue_concrete_powder_trapdoor = BLOCKS.register("blue_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> brown_concrete_powder_trapdoor = BLOCKS.register("brown_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> green_concrete_powder_trapdoor = BLOCKS.register("green_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> red_concrete_powder_trapdoor = BLOCKS.register("red_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE_POWDER)));
	public static final RegistryObject<Block> black_concrete_powder_trapdoor = BLOCKS.register("black_concrete_powder_trapdoor", () -> new ConcretePowderTrapdoor(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> dried_kelp_block_trapdoor = BLOCKS.register("dried_kelp_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DRIED_KELP_BLOCK)));
	public static final RegistryObject<Block> dead_tube_coral_block_trapdoor = BLOCKS.register("dead_tube_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_brain_coral_block_trapdoor = BLOCKS.register("dead_brain_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_bubble_coral_block_trapdoor = BLOCKS.register("dead_bubble_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_fire_coral_block_trapdoor = BLOCKS.register("dead_fire_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_horn_coral_block_trapdoor = BLOCKS.register("dead_horn_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> tube_coral_block_trapdoor = BLOCKS.register("tube_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> brain_coral_block_trapdoor = BLOCKS.register("brain_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> bubble_coral_block_trapdoor = BLOCKS.register("bubble_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> fire_coral_block_trapdoor = BLOCKS.register("fire_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> horn_coral_block_trapdoor = BLOCKS.register("horn_coral_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> blue_ice_trapdoor = BLOCKS.register("blue_ice_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_ICE)));
	public static final RegistryObject<Block> warped_stem_trapdoor = BLOCKS.register("warped_stem_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.copy(Blocks.WARPED_STEM)));
	public static final RegistryObject<Block> stripped_warped_stem_trapdoor = BLOCKS.register("stripped_warped_stem_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_STEM)));
	public static final RegistryObject<Block> warped_hyphae_trapdoor = BLOCKS.register("warped_hyphae_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.copy(Blocks.WARPED_HYPHAE)));
	public static final RegistryObject<Block> stripped_warped_hyphae_trapdoor = BLOCKS.register("stripped_warped_hyphae_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_HYPHAE)));
	public static final RegistryObject<Block> warped_nylium_trapdoor = BLOCKS.register("warped_nylium_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_NYLIUM)));
	public static final RegistryObject<Block> warped_wart_block_trapdoor = BLOCKS.register("warped_wart_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_WART_BLOCK)));
	public static final RegistryObject<Block> crimson_stem_trapdoor = BLOCKS.register("crimson_stem_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.copy(Blocks.CRIMSON_STEM)));
	public static final RegistryObject<Block> stripped_crimson_stem_trapdoor = BLOCKS.register("stripped_crimson_stem_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_STEM)));
	public static final RegistryObject<Block> crimson_hyphae_trapdoor = BLOCKS.register("crimson_hyphae_trapdoor", () -> new LogTrapdoor(BlockBehaviour.Properties.copy(Blocks.CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> stripped_crimson_hyphae_trapdoor = BLOCKS.register("stripped_crimson_hyphae_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> crimson_nylium_trapdoor = BLOCKS.register("crimson_nylium_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_NYLIUM)));
	public static final RegistryObject<Block> shroomlight_trapdoor = BLOCKS.register("shroomlight_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SHROOMLIGHT)));
	public static final RegistryObject<Block> honey_block_trapdoor = BLOCKS.register("honey_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.HONEY_BLOCK)));
	public static final RegistryObject<Block> honeycomb_block_trapdoor = BLOCKS.register("honeycomb_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.HONEYCOMB_BLOCK)));
	public static final RegistryObject<Block> netherite_block_trapdoor = BLOCKS.register("netherite_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.NETHERITE_BLOCK)));
	public static final RegistryObject<Block> ancient_debris_trapdoor = BLOCKS.register("ancient_debris_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ANCIENT_DEBRIS)));
	public static final RegistryObject<Block> crying_obsidian_trapdoor = BLOCKS.register("crying_obsidian_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CRYING_OBSIDIAN)));
	public static final RegistryObject<Block> blackstone_trapdoor = BLOCKS.register("blackstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BLACKSTONE)));
	public static final RegistryObject<Block> polished_blackstone_trapdoor = BLOCKS.register("polished_blackstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BLACKSTONE)));
	public static final RegistryObject<Block> polished_blackstone_brick_trapdoor = BLOCKS.register("polished_blackstone_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BLACKSTONE_BRICKS)));
	public static final RegistryObject<Block> cracked_polished_blackstone_brick_trapdoor = BLOCKS.register("cracked_polished_blackstone_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_polished_blackstone_trapdoor = BLOCKS.register("chiseled_polished_blackstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_POLISHED_BLACKSTONE)));
	public static final RegistryObject<Block> gilded_blackstone_trapdoor = BLOCKS.register("gilded_blackstone_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GILDED_BLACKSTONE)));
	public static final RegistryObject<Block> chiseled_nether_brick_trapdoor = BLOCKS.register("chiseled_nether_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_NETHER_BRICKS)));
	public static final RegistryObject<Block> cracked_nether_brick_trapdoor = BLOCKS.register("cracked_nether_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_NETHER_BRICKS)));
	public static final RegistryObject<Block> quartz_brick_trapdoor = BLOCKS.register("quartz_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_BRICKS)));
	public static final RegistryObject<Block> AMETHYST_BLOCK_TRAPDOOR = BLOCKS.register("amethyst_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.AMETHYST_BLOCK)));
	public static final RegistryObject<Block> AZALEA_LEAVES_TRAPDOOR = BLOCKS.register("azalea_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.AZALEA_LEAVES)));
	public static final RegistryObject<Block> BUDDING_AMETHYST_TRAPDOOR = BLOCKS.register("budding_amethyst_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.BUDDING_AMETHYST)));
	public static final RegistryObject<Block> CALCITE_TRAPDOOR = BLOCKS.register("calcite_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CALCITE)));
	public static final RegistryObject<Block> CHISELED_DEEPSLATE_TRAPDOOR = BLOCKS.register("chiseled_deepslate_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_DEEPSLATE)));
	public static final RegistryObject<Block> COBBLED_DEEPSLATE_TRAPDOOR = BLOCKS.register("cobbled_deepslate_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.COBBLED_DEEPSLATE)));
	public static final RegistryObject<Block> COPPER_BLOCK_TRAPDOOR = BLOCKS.register("copper_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_BLOCK)));
	public static final RegistryObject<Block> COPPER_ORE_TRAPDOOR = BLOCKS.register("copper_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_ORE)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_BRICK_TRAPDOOR = BLOCKS.register("cracked_deepslate_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_BRICKS)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_TILE_TRAPDOOR = BLOCKS.register("cracked_deepslate_tile_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_TILES)));
	public static final RegistryObject<Block> CUT_COPPER_TRAPDOOR = BLOCKS.register("cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.CUT_COPPER)));
	public static final RegistryObject<Block> DEEPSLATE_BRICK_TRAPDOOR = BLOCKS.register("deepslate_brick_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_BRICKS)));
	public static final RegistryObject<Block> DEEPSLATE_COAL_ORE_TRAPDOOR = BLOCKS.register("deepslate_coal_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COAL_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_COPPER_ORE_TRAPDOOR = BLOCKS.register("deepslate_copper_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COPPER_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_DIAMOND_ORE_TRAPDOOR = BLOCKS.register("deepslate_diamond_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_DIAMOND_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_EMERALD_ORE_TRAPDOOR = BLOCKS.register("deepslate_emerald_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_EMERALD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_GOLD_ORE_TRAPDOOR = BLOCKS.register("deepslate_gold_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_GOLD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_IRON_ORE_TRAPDOOR = BLOCKS.register("deepslate_iron_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_IRON_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_LAPIS_ORE_TRAPDOOR = BLOCKS.register("deepslate_lapis_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_LAPIS_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_REDSTONE_ORE_TRAPDOOR = BLOCKS.register("deepslate_redstone_ore_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().lightLevel(/*litBlockEmission(9)*/ state -> 9).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
	public static final RegistryObject<Block> DEEPSLATE_TILE_TRAPDOOR = BLOCKS.register("deepslate_tile_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_TILES)));
	public static final RegistryObject<Block> DEEPSLATE_TRAPDOOR = BLOCKS.register("deepslate_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE)));
	public static final RegistryObject<Block> DRIPSTONE_BLOCK_TRAPDOOR = BLOCKS.register("dripstone_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.DRIPSTONE_BLOCK)));
	public static final RegistryObject<Block> EXPOSED_COPPER_TRAPDOOR = BLOCKS.register("exposed_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.EXPOSED_COPPER)));
	public static final RegistryObject<Block> EXPOSED_CUT_COPPER_TRAPDOOR = BLOCKS.register("exposed_cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.EXPOSED_CUT_COPPER)));
	public static final RegistryObject<Block> FLOWERING_AZALEA_LEAVES_TRAPDOOR = BLOCKS.register("flowering_azalea_leaves_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.FLOWERING_AZALEA_LEAVES)));
	public static final RegistryObject<Block> GLOW_LICHEN_TRAPDOOR = BLOCKS.register("glow_lichen_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.GLOW_LICHEN)));
	public static final RegistryObject<Block> MOSS_BLOCK_TRAPDOOR = BLOCKS.register("moss_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.MOSS_BLOCK)));
	public static final RegistryObject<Block> OXIDIZED_COPPER_TRAPDOOR = BLOCKS.register("oxidized_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.OXIDIZED_COPPER)));
	public static final RegistryObject<Block> OXIDIZED_CUT_COPPER_TRAPDOOR = BLOCKS.register("oxidized_cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.OXIDIZED_CUT_COPPER)));
	public static final RegistryObject<Block> POLISHED_DEEPSLATE_TRAPDOOR = BLOCKS.register("polished_deepslate_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_DEEPSLATE)));
	public static final RegistryObject<Block> RAW_COPPER_BLOCK_TRAPDOOR = BLOCKS.register("raw_copper_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RAW_COPPER_BLOCK)));
	public static final RegistryObject<Block> RAW_GOLD_BLOCK_TRAPDOOR = BLOCKS.register("raw_gold_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RAW_GOLD_BLOCK)));
	public static final RegistryObject<Block> RAW_IRON_BLOCK_TRAPDOOR = BLOCKS.register("raw_iron_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.RAW_IRON_BLOCK)));
	public static final RegistryObject<Block> ROOTED_DIRT_TRAPDOOR = BLOCKS.register("rooted_dirt_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.ROOTED_DIRT)));
	public static final RegistryObject<Block> SMOOTH_BASALT_TRAPDOOR = BLOCKS.register("smooth_basalt_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_BASALT)));
	public static final RegistryObject<Block> TUFF_TRAPDOOR = BLOCKS.register("tuff_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.TUFF)));
	public static final RegistryObject<Block> WAXED_COPPER_BLOCK_TRAPDOOR = BLOCKS.register("waxed_copper_block_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_COPPER_BLOCK)));
	public static final RegistryObject<Block> WAXED_CUT_COPPER_TRAPDOOR = BLOCKS.register("waxed_cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_TRAPDOOR = BLOCKS.register("waxed_exposed_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_COPPER)));
	public static final RegistryObject<Block> WAXED_EXPOSED_CUT_COPPER_TRAPDOOR = BLOCKS.register("waxed_exposed_cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_TRAPDOOR = BLOCKS.register("waxed_oxidized_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_CUT_COPPER_TRAPDOOR = BLOCKS.register("waxed_oxidized_cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_TRAPDOOR = BLOCKS.register("waxed_weathered_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_CUT_COPPER_TRAPDOOR = BLOCKS.register("waxed_weathered_cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_CUT_COPPER)));
	public static final RegistryObject<Block> WEATHERED_COPPER_TRAPDOOR = BLOCKS.register("weathered_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WEATHERED_COPPER)));
	public static final RegistryObject<Block> WEATHERED_CUT_COPPER_TRAPDOOR = BLOCKS.register("weathered_cut_copper_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.WEATHERED_CUT_COPPER)));

	public static final RegistryObject<Block> stone_wall = BLOCKS.register("stone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.STONE)));
	public static final RegistryObject<Block> polished_granite_wall = BLOCKS.register("polished_granite_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_GRANITE)));
	public static final RegistryObject<Block> polished_diorite_wall = BLOCKS.register("polished_diorite_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_DIORITE)));
	public static final RegistryObject<Block> polished_andesite_wall = BLOCKS.register("polished_andesite_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_ANDESITE)));
	public static final RegistryObject<Block> grass_block_wall = BLOCKS.register("grass_block_wall", () -> new GrassBlockWall(BlockBehaviour.Properties.copy(Blocks.GRASS_BLOCK)));
	public static final RegistryObject<Block> dirt_wall = BLOCKS.register("dirt_wall", () -> new FlattenableWall(BlockBehaviour.Properties.copy(Blocks.DIRT)));
	public static final RegistryObject<Block> coarse_dirt_wall = BLOCKS.register("coarse_dirt_wall", () -> new CoarseDirtWall(BlockBehaviour.Properties.copy(Blocks.COARSE_DIRT)));
	public static final RegistryObject<Block> podzol_wall = BLOCKS.register("podzol_wall", () -> new FlattenableWall(BlockBehaviour.Properties.copy(Blocks.PODZOL)));
	public static final RegistryObject<Block> oak_plank_wall = BLOCKS.register("oak_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)));
	public static final RegistryObject<Block> spruce_plank_wall = BLOCKS.register("spruce_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_PLANKS)));
	public static final RegistryObject<Block> birch_plank_wall = BLOCKS.register("birch_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_PLANKS)));
	public static final RegistryObject<Block> jungle_plank_wall = BLOCKS.register("jungle_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_PLANKS)));
	public static final RegistryObject<Block> acacia_plank_wall = BLOCKS.register("acacia_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_PLANKS)));
	public static final RegistryObject<Block> dark_oak_plank_wall = BLOCKS.register("dark_oak_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_PLANKS)));
	public static final RegistryObject<Block> bedrock_wall = BLOCKS.register("bedrock_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BEDROCK)));
	public static final RegistryObject<Block> sand_wall = BLOCKS.register("sand_wall", () -> new FallingWall(BlockBehaviour.Properties.copy(Blocks.SAND)));
	public static final RegistryObject<Block> red_sand_wall = BLOCKS.register("red_sand_wall", () -> new FallingWall(BlockBehaviour.Properties.copy(Blocks.RED_SAND)));
	public static final RegistryObject<Block> gravel_wall = BLOCKS.register("gravel_wall", () -> new FallingWall(BlockBehaviour.Properties.copy(Blocks.GRAVEL)));
	public static final RegistryObject<Block> gold_ore_wall = BLOCKS.register("gold_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.GOLD_ORE)));
	public static final RegistryObject<Block> iron_ore_wall = BLOCKS.register("iron_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.IRON_ORE)));
	public static final RegistryObject<Block> coal_ore_wall = BLOCKS.register("coal_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.COAL_ORE), UniformInt.of(0, 2)));
	public static final RegistryObject<Block> nether_gold_ore_wall = BLOCKS.register("nether_gold_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.NETHER_GOLD_ORE), UniformInt.of(0, 1)));
	public static final RegistryObject<Block> oak_log_wall = BLOCKS.register("oak_log_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_log_wall = BLOCKS.register("spruce_log_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_log_wall = BLOCKS.register("birch_log_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_log_wall = BLOCKS.register("jungle_log_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_log_wall = BLOCKS.register("acacia_log_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_log_wall = BLOCKS.register("dark_oak_log_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_log_wall = BLOCKS.register("stripped_oak_log_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_log_wall = BLOCKS.register("stripped_spruce_log_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_log_wall = BLOCKS.register("stripped_birch_log_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_log_wall = BLOCKS.register("stripped_jungle_log_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_log_wall = BLOCKS.register("stripped_acacia_log_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_log_wall = BLOCKS.register("stripped_dark_oak_log_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_wood_wall = BLOCKS.register("oak_wood_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> spruce_wood_wall = BLOCKS.register("spruce_wood_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> birch_wood_wall = BLOCKS.register("birch_wood_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> jungle_wood_wall = BLOCKS.register("jungle_wood_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> acacia_wood_wall = BLOCKS.register("acacia_wood_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_oak_wood_wall = BLOCKS.register("dark_oak_wood_wall", () -> new LogWall(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_oak_wood_wall = BLOCKS.register("stripped_oak_wood_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_spruce_wood_wall = BLOCKS.register("stripped_spruce_wood_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_birch_wood_wall = BLOCKS.register("stripped_birch_wood_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_jungle_wood_wall = BLOCKS.register("stripped_jungle_wood_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_acacia_wood_wall = BLOCKS.register("stripped_acacia_wood_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> stripped_dark_oak_wood_wall = BLOCKS.register("stripped_dark_oak_wood_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_leaves_wall = BLOCKS.register("oak_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)));
	public static final RegistryObject<Block> spruce_leaves_wall = BLOCKS.register("spruce_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_LEAVES)));
	public static final RegistryObject<Block> birch_leaves_wall = BLOCKS.register("birch_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_LEAVES)));
	public static final RegistryObject<Block> jungle_leaves_wall = BLOCKS.register("jungle_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_LEAVES)));
	public static final RegistryObject<Block> acacia_leaves_wall = BLOCKS.register("acacia_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_LEAVES)));
	public static final RegistryObject<Block> dark_oak_leaves_wall = BLOCKS.register("dark_oak_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_LEAVES)));
	public static final RegistryObject<Block> sponge_wall = BLOCKS.register("sponge_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SPONGE)));
	public static final RegistryObject<Block> wet_sponge_wall = BLOCKS.register("wet_sponge_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WET_SPONGE)));
	public static final RegistryObject<Block> glass_wall = BLOCKS.register("glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GLASS)));
	public static final RegistryObject<Block> lapis_ore_wall = BLOCKS.register("lapis_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.LAPIS_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> lapis_block_wall = BLOCKS.register("lapis_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LAPIS_BLOCK)));
	public static final RegistryObject<Block> chiseled_sandstone_wall = BLOCKS.register("chiseled_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_SANDSTONE)));
	public static final RegistryObject<Block> cut_sandstone_wall = BLOCKS.register("cut_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CUT_SANDSTONE)));
	public static final RegistryObject<Block> white_wool_wall = BLOCKS.register("white_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_WOOL)));
	public static final RegistryObject<Block> orange_wool_wall = BLOCKS.register("orange_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_WOOL)));
	public static final RegistryObject<Block> magenta_wool_wall = BLOCKS.register("magenta_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_WOOL)));
	public static final RegistryObject<Block> light_blue_wool_wall = BLOCKS.register("light_blue_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_WOOL)));
	public static final RegistryObject<Block> yellow_wool_wall = BLOCKS.register("yellow_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_WOOL)));
	public static final RegistryObject<Block> lime_wool_wall = BLOCKS.register("lime_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIME_WOOL)));
	public static final RegistryObject<Block> pink_wool_wall = BLOCKS.register("pink_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PINK_WOOL)));
	public static final RegistryObject<Block> gray_wool_wall = BLOCKS.register("gray_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_WOOL)));
	public static final RegistryObject<Block> light_gray_wool_wall = BLOCKS.register("light_gray_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL)));
	public static final RegistryObject<Block> cyan_wool_wall = BLOCKS.register("cyan_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_WOOL)));
	public static final RegistryObject<Block> purple_wool_wall = BLOCKS.register("purple_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_WOOL)));
	public static final RegistryObject<Block> blue_wool_wall = BLOCKS.register("blue_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_WOOL)));
	public static final RegistryObject<Block> brown_wool_wall = BLOCKS.register("brown_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_WOOL)));
	public static final RegistryObject<Block> green_wool_wall = BLOCKS.register("green_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_WOOL)));
	public static final RegistryObject<Block> red_wool_wall = BLOCKS.register("red_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RED_WOOL)));
	public static final RegistryObject<Block> black_wool_wall = BLOCKS.register("black_wool_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_WOOL)));
	public static final RegistryObject<Block> gold_block_wall = BLOCKS.register("gold_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GOLD_BLOCK)));
	public static final RegistryObject<Block> iron_block_wall = BLOCKS.register("iron_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK)));
	public static final RegistryObject<Block> tnt_wall = BLOCKS.register("tnt_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.TNT)));
	public static final RegistryObject<Block> bookshelf_wall = BLOCKS.register("bookshelf_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BOOKSHELF)));
	public static final RegistryObject<Block> obsidian_wall = BLOCKS.register("obsidian_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
	public static final RegistryObject<Block> spawner_wall = BLOCKS.register("spawner_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SPAWNER)));
	public static final RegistryObject<Block> diamond_ore_wall = BLOCKS.register("diamond_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.DIAMOND_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> diamond_block_wall = BLOCKS.register("diamond_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DIAMOND_BLOCK)));
	public static final RegistryObject<Block> redstone_ore_wall = BLOCKS.register("redstone_ore_wall", () -> new OreWall(BlockBehaviour.Properties.of(Material.STONE).lightLevel((state) -> 4).strength(3.0F, 3.0F), UniformInt.of(1, 5)));
	public static final RegistryObject<Block> ice_wall = BLOCKS.register("ice_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ICE)));
	public static final RegistryObject<Block> snow_block_wall = BLOCKS.register("snow_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
	public static final RegistryObject<Block> clay_wall = BLOCKS.register("clay_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CLAY)));
	public static final RegistryObject<Block> pumpkin_wall = BLOCKS.register("pumpkin_wall", () -> new PumpkinWall(BlockBehaviour.Properties.copy(Blocks.PUMPKIN)));
	public static final RegistryObject<Block> netherrack_wall = BLOCKS.register("netherrack_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
	public static final RegistryObject<Block> soul_sand_wall = BLOCKS.register("soul_sand_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_SAND)));
	public static final RegistryObject<Block> soul_soil_wall = BLOCKS.register("soul_soil_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_SOIL)));
	public static final RegistryObject<Block> glowstone_wall = BLOCKS.register("glowstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GLOWSTONE)));
	public static final RegistryObject<Block> carved_pumpkin_wall = BLOCKS.register("carved_pumpkin_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CARVED_PUMPKIN)));
	public static final RegistryObject<Block> jack_o_lantern_wall = BLOCKS.register("jack_o_lantern_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.JACK_O_LANTERN)));
	public static final RegistryObject<Block> white_stained_glass_wall = BLOCKS.register("white_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_STAINED_GLASS)));
	public static final RegistryObject<Block> orange_stained_glass_wall = BLOCKS.register("orange_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_STAINED_GLASS)));
	public static final RegistryObject<Block> magenta_stained_glass_wall = BLOCKS.register("magenta_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_STAINED_GLASS)));
	public static final RegistryObject<Block> light_blue_stained_glass_wall = BLOCKS.register("light_blue_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> yellow_stained_glass_wall = BLOCKS.register("yellow_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_STAINED_GLASS)));
	public static final RegistryObject<Block> lime_stained_glass_wall = BLOCKS.register("lime_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIME_STAINED_GLASS)));
	public static final RegistryObject<Block> pink_stained_glass_wall = BLOCKS.register("pink_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PINK_STAINED_GLASS)));
	public static final RegistryObject<Block> gray_stained_glass_wall = BLOCKS.register("gray_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> light_gray_stained_glass_wall = BLOCKS.register("light_gray_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_STAINED_GLASS)));
	public static final RegistryObject<Block> cyan_stained_glass_wall = BLOCKS.register("cyan_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_STAINED_GLASS)));
	public static final RegistryObject<Block> purple_stained_glass_wall = BLOCKS.register("purple_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_STAINED_GLASS)));
	public static final RegistryObject<Block> blue_stained_glass_wall = BLOCKS.register("blue_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_STAINED_GLASS)));
	public static final RegistryObject<Block> brown_stained_glass_wall = BLOCKS.register("brown_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_STAINED_GLASS)));
	public static final RegistryObject<Block> green_stained_glass_wall = BLOCKS.register("green_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_STAINED_GLASS)));
	public static final RegistryObject<Block> red_stained_glass_wall = BLOCKS.register("red_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RED_STAINED_GLASS)));
	public static final RegistryObject<Block> black_stained_glass_wall = BLOCKS.register("black_stained_glass_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_STAINED_GLASS)));
	public static final RegistryObject<Block> oak_trapdoor_wall = BLOCKS.register("oak_trapdoor_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.OAK_TRAPDOOR)));
	public static final RegistryObject<Block> spruce_trapdoor_wall = BLOCKS.register("spruce_trapdoor_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_TRAPDOOR)));
	public static final RegistryObject<Block> birch_trapdoor_wall = BLOCKS.register("birch_trapdoor_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_TRAPDOOR)));
	public static final RegistryObject<Block> jungle_trapdoor_wall = BLOCKS.register("jungle_trapdoor_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_TRAPDOOR)));
	public static final RegistryObject<Block> acacia_trapdoor_wall = BLOCKS.register("acacia_trapdoor_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_TRAPDOOR)));
	public static final RegistryObject<Block> dark_oak_trapdoor_wall = BLOCKS.register("dark_oak_trapdoor_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_TRAPDOOR)));
	public static final RegistryObject<Block> cracked_stone_brick_wall = BLOCKS.register("cracked_stone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_STONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_stone_brick_wall = BLOCKS.register("chiseled_stone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_STONE_BRICKS)));
	public static final RegistryObject<Block> brown_mushroom_block_wall = BLOCKS.register("brown_mushroom_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> red_mushroom_block_wall = BLOCKS.register("red_mushroom_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RED_MUSHROOM_BLOCK)));
	public static final RegistryObject<Block> mushroom_stem_wall = BLOCKS.register("mushroom_stem_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MUSHROOM_STEM)));
	public static final RegistryObject<Block> iron_bars_wall = BLOCKS.register("iron_bars_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BARS)));
	public static final RegistryObject<Block> melon_wall = BLOCKS.register("melon_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MELON)));
	public static final RegistryObject<Block> vine_wall = BLOCKS.register("vine_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.VINE)));
	public static final RegistryObject<Block> mycelium_wall = BLOCKS.register("mycelium_wall", () -> new MyceliumWall(BlockBehaviour.Properties.copy(Blocks.MYCELIUM)));
	public static final RegistryObject<Block> end_stone_wall = BLOCKS.register("end_stone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.END_STONE)));
	public static final RegistryObject<Block> dragon_egg_wall = BLOCKS.register("dragon_egg_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DRAGON_EGG)));
	public static final RegistryObject<Block> redstone_lamp_wall = BLOCKS.register("redstone_lamp_wall", () -> new RedstoneLampWall(BlockBehaviour.Properties.copy(Blocks.REDSTONE_LAMP)));
	public static final RegistryObject<Block> emerald_ore_wall = BLOCKS.register("emerald_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.EMERALD_ORE), UniformInt.of(3, 7)));
	public static final RegistryObject<Block> emerald_block_wall = BLOCKS.register("emerald_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.EMERALD_BLOCK)));
	public static final RegistryObject<Block> redstone_block_wall = BLOCKS.register("redstone_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.REDSTONE_BLOCK)));
	public static final RegistryObject<Block> nether_quartz_ore_wall = BLOCKS.register("nether_quartz_ore_wall", () -> new OreWall(BlockBehaviour.Properties.copy(Blocks.NETHER_QUARTZ_ORE), UniformInt.of(2, 5)));
	public static final RegistryObject<Block> hopper_wall = BLOCKS.register("hopper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.HOPPER)));
	public static final RegistryObject<Block> quartz_block_wall = BLOCKS.register("quartz_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_BLOCK)));
	public static final RegistryObject<Block> chiseled_quartz_block_wall = BLOCKS.register("chiseled_quartz_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_QUARTZ_BLOCK)));
	public static final RegistryObject<Block> quartz_pillar_wall = BLOCKS.register("quartz_pillar_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_PILLAR)));
	public static final RegistryObject<Block> white_terracotta_wall = BLOCKS.register("white_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
	public static final RegistryObject<Block> orange_terracotta_wall = BLOCKS.register("orange_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_terracotta_wall = BLOCKS.register("magenta_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_terracotta_wall = BLOCKS.register("light_blue_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_terracotta_wall = BLOCKS.register("yellow_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
	public static final RegistryObject<Block> lime_terracotta_wall = BLOCKS.register("lime_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
	public static final RegistryObject<Block> pink_terracotta_wall = BLOCKS.register("pink_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
	public static final RegistryObject<Block> gray_terracotta_wall = BLOCKS.register("gray_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_terracotta_wall = BLOCKS.register("light_gray_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_terracotta_wall = BLOCKS.register("cyan_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
	public static final RegistryObject<Block> purple_terracotta_wall = BLOCKS.register("purple_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
	public static final RegistryObject<Block> blue_terracotta_wall = BLOCKS.register("blue_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
	public static final RegistryObject<Block> brown_terracotta_wall = BLOCKS.register("brown_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
	public static final RegistryObject<Block> green_terracotta_wall = BLOCKS.register("green_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
	public static final RegistryObject<Block> red_terracotta_wall = BLOCKS.register("red_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
	public static final RegistryObject<Block> black_terracotta_wall = BLOCKS.register("black_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
	public static final RegistryObject<Block> slime_block_wall = BLOCKS.register("slime_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SLIME_BLOCK)));
	public static final RegistryObject<Block> iron_trapdoor_wall = BLOCKS.register("iron_trapdoor_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.IRON_TRAPDOOR)));
	public static final RegistryObject<Block> prismarine_brick_wall = BLOCKS.register("prismarine_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PRISMARINE_BRICKS)));
	public static final RegistryObject<Block> dark_prismarine_wall = BLOCKS.register("dark_prismarine_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
	public static final RegistryObject<Block> sea_lantern_wall = BLOCKS.register("sea_lantern_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SEA_LANTERN)));
	public static final RegistryObject<Block> hay_block_wall = BLOCKS.register("hay_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.HAY_BLOCK)));
	public static final RegistryObject<Block> terracotta_wall = BLOCKS.register("terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
	public static final RegistryObject<Block> coal_block_wall = BLOCKS.register("coal_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.COAL_BLOCK)));
	public static final RegistryObject<Block> packed_ice_wall = BLOCKS.register("packed_ice_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)));
	public static final RegistryObject<Block> chiseled_red_sandstone_wall = BLOCKS.register("chiseled_red_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_RED_SANDSTONE)));
	public static final RegistryObject<Block> cut_red_sandstone_wall = BLOCKS.register("cut_red_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CUT_RED_SANDSTONE)));
	public static final RegistryObject<Block> smooth_stone_wall = BLOCKS.register("smooth_stone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_STONE)));
	public static final RegistryObject<Block> smooth_sandstone_wall = BLOCKS.register("smooth_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_SANDSTONE)));
	public static final RegistryObject<Block> smooth_quartz_wall = BLOCKS.register("smooth_quartz_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_QUARTZ)));
	public static final RegistryObject<Block> smooth_red_sandstone_wall = BLOCKS.register("smooth_red_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_RED_SANDSTONE)));
	public static final RegistryObject<Block> purpur_block_wall = BLOCKS.register("purpur_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PURPUR_BLOCK)));
	public static final RegistryObject<Block> purpur_pillar_wall = BLOCKS.register("purpur_pillar_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PURPUR_PILLAR)));
	public static final RegistryObject<Block> dirt_path_wall = BLOCKS.register("dirt_path_wall", () -> new DirtPathWall(BlockBehaviour.Properties.copy(Blocks.DIRT_PATH)));
	public static final RegistryObject<Block> magma_block_wall = BLOCKS.register("magma_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MAGMA_BLOCK)));
	public static final RegistryObject<Block> nether_wart_block_wall = BLOCKS.register("bone_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BONE_BLOCK)));
	public static final RegistryObject<Block> bone_block_wall = BLOCKS.register("nether_wart_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_WART_BLOCK)));
	public static final RegistryObject<Block> white_glazed_terracotta_wall = BLOCKS.register("white_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> orange_glazed_terracotta_wall = BLOCKS.register("orange_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> magenta_glazed_terracotta_wall = BLOCKS.register("magenta_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_blue_glazed_terracotta_wall = BLOCKS.register("light_blue_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> yellow_glazed_terracotta_wall = BLOCKS.register("yellow_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> lime_glazed_terracotta_wall = BLOCKS.register("lime_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIME_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> pink_glazed_terracotta_wall = BLOCKS.register("pink_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PINK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> gray_glazed_terracotta_wall = BLOCKS.register("gray_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> light_gray_glazed_terracotta_wall = BLOCKS.register("light_gray_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> cyan_glazed_terracotta_wall = BLOCKS.register("cyan_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> purple_glazed_terracotta_wall = BLOCKS.register("purple_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> blue_glazed_terracotta_wall = BLOCKS.register("blue_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> brown_glazed_terracotta_wall = BLOCKS.register("brown_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> green_glazed_terracotta_wall = BLOCKS.register("green_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> red_glazed_terracotta_wall = BLOCKS.register("red_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RED_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> black_glazed_terracotta_wall = BLOCKS.register("black_glazed_terracotta_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_GLAZED_TERRACOTTA)));
	public static final RegistryObject<Block> white_concrete_wall = BLOCKS.register("white_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE)));
	public static final RegistryObject<Block> orange_concrete_wall = BLOCKS.register("orange_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE)));
	public static final RegistryObject<Block> magenta_concrete_wall = BLOCKS.register("magenta_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE)));
	public static final RegistryObject<Block> light_blue_concrete_wall = BLOCKS.register("light_blue_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE)));
	public static final RegistryObject<Block> yellow_concrete_wall = BLOCKS.register("yellow_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE)));
	public static final RegistryObject<Block> lime_concrete_wall = BLOCKS.register("lime_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE)));
	public static final RegistryObject<Block> pink_concrete_wall = BLOCKS.register("pink_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE)));
	public static final RegistryObject<Block> gray_concrete_wall = BLOCKS.register("gray_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE)));
	public static final RegistryObject<Block> light_gray_concrete_wall = BLOCKS.register("light_gray_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE)));
	public static final RegistryObject<Block> cyan_concrete_wall = BLOCKS.register("cyan_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE)));
	public static final RegistryObject<Block> purple_concrete_wall = BLOCKS.register("purple_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE)));
	public static final RegistryObject<Block> blue_concrete_wall = BLOCKS.register("blue_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE)));
	public static final RegistryObject<Block> brown_concrete_wall = BLOCKS.register("brown_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE)));
	public static final RegistryObject<Block> green_concrete_wall = BLOCKS.register("green_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE)));
	public static final RegistryObject<Block> red_concrete_wall = BLOCKS.register("red_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE)));
	public static final RegistryObject<Block> black_concrete_wall = BLOCKS.register("black_concrete_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE)));
	public static final RegistryObject<Block> white_concrete_powder_wall = BLOCKS.register("white_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.WHITE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> orange_concrete_powder_wall = BLOCKS.register("orange_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.ORANGE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> magenta_concrete_powder_wall = BLOCKS.register("magenta_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.MAGENTA_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_blue_concrete_powder_wall = BLOCKS.register("light_blue_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> yellow_concrete_powder_wall = BLOCKS.register("yellow_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.YELLOW_CONCRETE_POWDER)));
	public static final RegistryObject<Block> lime_concrete_powder_wall = BLOCKS.register("lime_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.LIME_CONCRETE_POWDER)));
	public static final RegistryObject<Block> pink_concrete_powder_wall = BLOCKS.register("pink_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.PINK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> gray_concrete_powder_wall = BLOCKS.register("gray_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> light_gray_concrete_powder_wall = BLOCKS.register("light_gray_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE_POWDER)));
	public static final RegistryObject<Block> cyan_concrete_powder_wall = BLOCKS.register("cyan_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.CYAN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> purple_concrete_powder_wall = BLOCKS.register("purple_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.PURPLE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> blue_concrete_powder_wall = BLOCKS.register("blue_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.BLUE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> brown_concrete_powder_wall = BLOCKS.register("brown_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.BROWN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> green_concrete_powder_wall = BLOCKS.register("green_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.GREEN_CONCRETE_POWDER)));
	public static final RegistryObject<Block> red_concrete_powder_wall = BLOCKS.register("red_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.RED_CONCRETE_POWDER)));
	public static final RegistryObject<Block> black_concrete_powder_wall = BLOCKS.register("black_concrete_powder_wall", () -> new ConcretePowderWall(BlockBehaviour.Properties.copy(Blocks.BLACK_CONCRETE_POWDER)));
	public static final RegistryObject<Block> dried_kelp_block_wall = BLOCKS.register("dried_kelp_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DRIED_KELP_BLOCK)));
	public static final RegistryObject<Block> dead_tube_coral_block_wall = BLOCKS.register("dead_tube_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_brain_coral_block_wall = BLOCKS.register("dead_brain_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_bubble_coral_block_wall = BLOCKS.register("dead_bubble_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_fire_coral_block_wall = BLOCKS.register("dead_fire_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> dead_horn_coral_block_wall = BLOCKS.register("dead_horn_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEAD_HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> tube_coral_block_wall = BLOCKS.register("tube_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.TUBE_CORAL_BLOCK)));
	public static final RegistryObject<Block> brain_coral_block_wall = BLOCKS.register("brain_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BRAIN_CORAL_BLOCK)));
	public static final RegistryObject<Block> bubble_coral_block_wall = BLOCKS.register("bubble_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BUBBLE_CORAL_BLOCK)));
	public static final RegistryObject<Block> fire_coral_block_wall = BLOCKS.register("fire_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.FIRE_CORAL_BLOCK)));
	public static final RegistryObject<Block> horn_coral_block_wall = BLOCKS.register("horn_coral_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.HORN_CORAL_BLOCK)));
	public static final RegistryObject<Block> blue_ice_wall = BLOCKS.register("blue_ice_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BLUE_ICE)));
	public static final RegistryObject<Block> honey_block_wall = BLOCKS.register("honey_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.HONEY_BLOCK)));
	public static final RegistryObject<Block> honeycomb_block_wall = BLOCKS.register("honeycomb_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.HONEYCOMB_BLOCK)));
	public static final RegistryObject<Block> warped_stem_wall = BLOCKS.register("warped_stem_wall", () -> new LogWall(BlockBehaviour.Properties.copy(Blocks.WARPED_STEM)));
	public static final RegistryObject<Block> stripped_warped_stem_wall = BLOCKS.register("stripped_warped_stem_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_STEM)));
	public static final RegistryObject<Block> warped_hyphae_wall = BLOCKS.register("warped_hyphae_wall", () -> new LogWall(BlockBehaviour.Properties.copy(Blocks.WARPED_HYPHAE)));
	public static final RegistryObject<Block> stripped_warped_hyphae_wall = BLOCKS.register("stripped_warped_hyphae_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_WARPED_HYPHAE)));
	public static final RegistryObject<Block> warped_plank_wall = BLOCKS.register("warped_nylium_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_NYLIUM)));
	public static final RegistryObject<Block> warped_nylium_wall = BLOCKS.register("warped_wart_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_WART_BLOCK)));
	public static final RegistryObject<Block> warped_wart_block_wall = BLOCKS.register("crimson_stem_wall", () -> new LogWall(BlockBehaviour.Properties.copy(Blocks.CRIMSON_STEM)));
	public static final RegistryObject<Block> crimson_stem_wall = BLOCKS.register("stripped_crimson_stem_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_STEM)));
	public static final RegistryObject<Block> stripped_crimson_stem_wall = BLOCKS.register("crimson_hyphae_wall", () -> new LogWall(BlockBehaviour.Properties.copy(Blocks.CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> crimson_hyphae_wall = BLOCKS.register("stripped_crimson_hyphae_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_CRIMSON_HYPHAE)));
	public static final RegistryObject<Block> stripped_crimson_hyphae_wall = BLOCKS.register("crimson_nylium_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_NYLIUM)));
	public static final RegistryObject<Block> crimson_plank_wall = BLOCKS.register("shroomlight_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SHROOMLIGHT)));
	public static final RegistryObject<Block> crimson_nylium_wall = BLOCKS.register("crimson_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_PLANKS)));
	public static final RegistryObject<Block> shroomlight_wall = BLOCKS.register("warped_plank_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_PLANKS)));
	public static final RegistryObject<Block> netherite_block_wall = BLOCKS.register("netherite_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.NETHERITE_BLOCK)));
	public static final RegistryObject<Block> ancient_debris_wall = BLOCKS.register("ancient_debris_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.ANCIENT_DEBRIS)));
	public static final RegistryObject<Block> crying_obsidian_wall = BLOCKS.register("crying_obsidian_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRYING_OBSIDIAN)));
	public static final RegistryObject<Block> basalt_wall = BLOCKS.register("basalt_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BASALT)));
	public static final RegistryObject<Block> polished_basalt_wall = BLOCKS.register("polished_basalt_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_BASALT)));
	public static final RegistryObject<Block> cracked_polished_blackstone_brick_wall = BLOCKS.register("cracked_polished_blackstone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS)));
	public static final RegistryObject<Block> chiseled_polished_blackstone_wall = BLOCKS.register("chiseled_polished_blackstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_POLISHED_BLACKSTONE)));
	public static final RegistryObject<Block> gilded_blackstone_wall = BLOCKS.register("gilded_blackstone_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GILDED_BLACKSTONE)));
	public static final RegistryObject<Block> chiseled_nether_brick_wall = BLOCKS.register("chiseled_nether_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_NETHER_BRICKS)));
	public static final RegistryObject<Block> cracked_nether_brick_wall = BLOCKS.register("cracked_nether_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_NETHER_BRICKS)));
	public static final RegistryObject<Block> quartz_brick_wall = BLOCKS.register("quartz_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.QUARTZ_BRICKS)));
	public static final RegistryObject<Block> AMETHYST_BLOCK_WALL = BLOCKS.register("amethyst_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.AMETHYST_BLOCK)));
	public static final RegistryObject<Block> AZALEA_LEAVES_WALL = BLOCKS.register("azalea_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.AZALEA_LEAVES)));
	public static final RegistryObject<Block> BUDDING_AMETHYST_WALL = BLOCKS.register("budding_amethyst_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.BUDDING_AMETHYST)));
	public static final RegistryObject<Block> CALCITE_WALL = BLOCKS.register("calcite_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CALCITE)));
	public static final RegistryObject<Block> CHISELED_DEEPSLATE_WALL = BLOCKS.register("chiseled_deepslate_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CHISELED_DEEPSLATE)));
	public static final RegistryObject<Block> COPPER_BLOCK_WALL = BLOCKS.register("copper_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_BLOCK)));
	public static final RegistryObject<Block> COPPER_ORE_WALL = BLOCKS.register("copper_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.COPPER_ORE)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_BRICK_WALL = BLOCKS.register("cracked_deepslate_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_BRICKS)));
	public static final RegistryObject<Block> CRACKED_DEEPSLATE_TILE_WALL = BLOCKS.register("cracked_deepslate_tile_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CRACKED_DEEPSLATE_TILES)));
	public static final RegistryObject<Block> CUT_COPPER_WALL = BLOCKS.register("cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.CUT_COPPER)));
	public static final RegistryObject<Block> DEEPSLATE_COAL_ORE_WALL = BLOCKS.register("deepslate_coal_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COAL_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_COPPER_ORE_WALL = BLOCKS.register("deepslate_copper_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_COPPER_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_DIAMOND_ORE_WALL = BLOCKS.register("deepslate_diamond_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_DIAMOND_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_EMERALD_ORE_WALL = BLOCKS.register("deepslate_emerald_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_EMERALD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_GOLD_ORE_WALL = BLOCKS.register("deepslate_gold_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_GOLD_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_IRON_ORE_WALL = BLOCKS.register("deepslate_iron_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_IRON_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_LAPIS_ORE_WALL = BLOCKS.register("deepslate_lapis_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE_LAPIS_ORE)));
	public static final RegistryObject<Block> DEEPSLATE_REDSTONE_ORE_WALL = BLOCKS.register("deepslate_redstone_ore_wall", () -> new WallBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().lightLevel(/*litBlockEmission(9)*/ state -> 9).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
	public static final RegistryObject<Block> DEEPSLATE_WALL = BLOCKS.register("deepslate_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE)));
	public static final RegistryObject<Block> DRIPSTONE_BLOCK_WALL = BLOCKS.register("dripstone_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.DRIPSTONE_BLOCK)));
	public static final RegistryObject<Block> EXPOSED_COPPER_WALL = BLOCKS.register("exposed_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.EXPOSED_COPPER)));
	public static final RegistryObject<Block> EXPOSED_CUT_COPPER_WALL = BLOCKS.register("exposed_cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.EXPOSED_CUT_COPPER)));
	public static final RegistryObject<Block> FLOWERING_AZALEA_LEAVES_WALL = BLOCKS.register("flowering_azalea_leaves_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.FLOWERING_AZALEA_LEAVES)));
	public static final RegistryObject<Block> GLOW_LICHEN_WALL = BLOCKS.register("glow_lichen_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.GLOW_LICHEN)));
	public static final RegistryObject<Block> MOSS_BLOCK_WALL = BLOCKS.register("moss_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.MOSS_BLOCK)));
	public static final RegistryObject<Block> OXIDIZED_COPPER_WALL = BLOCKS.register("oxidized_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.OXIDIZED_COPPER)));
	public static final RegistryObject<Block> OXIDIZED_CUT_COPPER_WALL = BLOCKS.register("oxidized_cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.OXIDIZED_CUT_COPPER)));
	public static final RegistryObject<Block> RAW_COPPER_BLOCK_WALL = BLOCKS.register("raw_copper_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RAW_COPPER_BLOCK)));
	public static final RegistryObject<Block> RAW_GOLD_BLOCK_WALL = BLOCKS.register("raw_gold_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RAW_GOLD_BLOCK)));
	public static final RegistryObject<Block> RAW_IRON_BLOCK_WALL = BLOCKS.register("raw_iron_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.RAW_IRON_BLOCK)));
	public static final RegistryObject<Block> ROOTED_DIRT_WALL = BLOCKS.register("rooted_dirt_wall", () -> new FlattenableWall(BlockBehaviour.Properties.copy(Blocks.ROOTED_DIRT)));
	public static final RegistryObject<Block> SMOOTH_BASALT_WALL = BLOCKS.register("smooth_basalt_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.SMOOTH_BASALT)));
	public static final RegistryObject<Block> TUFF_WALL = BLOCKS.register("tuff_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.TUFF)));
	public static final RegistryObject<Block> WAXED_COPPER_BLOCK_WALL = BLOCKS.register("waxed_copper_block_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_COPPER_BLOCK)));
	public static final RegistryObject<Block> WAXED_CUT_COPPER_WALL = BLOCKS.register("waxed_cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_WALL = BLOCKS.register("waxed_exposed_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_COPPER)));
	public static final RegistryObject<Block> WAXED_EXPOSED_CUT_COPPER_WALL = BLOCKS.register("waxed_exposed_cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_EXPOSED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_WALL = BLOCKS.register("waxed_oxidized_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_COPPER)));
	public static final RegistryObject<Block> WAXED_OXIDIZED_CUT_COPPER_WALL = BLOCKS.register("waxed_oxidized_cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_OXIDIZED_CUT_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_WALL = BLOCKS.register("waxed_weathered_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_COPPER)));
	public static final RegistryObject<Block> WAXED_WEATHERED_CUT_COPPER_WALL = BLOCKS.register("waxed_weathered_cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WAXED_WEATHERED_CUT_COPPER)));
	public static final RegistryObject<Block> WEATHERED_COPPER_WALL = BLOCKS.register("weathered_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WEATHERED_COPPER)));
	public static final RegistryObject<Block> WEATHERED_CUT_COPPER_WALL = BLOCKS.register("weathered_cut_copper_wall", () -> new WallBlock(BlockBehaviour.Properties.copy(Blocks.WEATHERED_CUT_COPPER)));

}
